require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ScenariosController, type: :controller do
  fixtures :all
  login_user

  # This should return the minimal set of attributes required to create a valid
  # Scenario. As you add validations to Scenario, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { user: users(:bob), name: "test", data: JSON.parse("{\"schema_version\":1,\"name\":\"test\",\"description\":\"No description provided\",\"guid\":\"2d99fa86351e84316c4797509579d46d\",\"agents\":[{\"type\":\"Agents::EventFormattingAgent\",\"name\":\"array test\"}]}") }
  }

  let(:invalid_attributes) {
    { user: users(:bob), name: "test", data: "{test: fail_json}" }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ScenariosController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all scenarios as @scenarios" do
      scenario = Scenario.create!(valid_attributes)
      get :index, params: {}, session: valid_session
      expect(assigns(:scenarios)).to include(scenarios(:bob_weather))
      expect(assigns(:scenarios)).to include(scenario)
    end
  end

  describe "GET #show" do
    it "assigns the requested scenario as @scenario" do
      scenario = Scenario.create! valid_attributes
      get :show, params: {id: scenario.to_param}, session: valid_session
      expect(assigns(:scenario)).to eq(scenario)
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested scenario" do
      scenario = Scenario.create! valid_attributes
      expect {
        delete :destroy, params: {id: scenario.to_param}, session: valid_session
      }.to change(Scenario, :count).by(-1)
    end

    it "redirects to the scenarios list" do
      scenario = Scenario.create! valid_attributes
      delete :destroy, params: {id: scenario.to_param}, session: valid_session
      expect(response).to redirect_to(scenarios_url)
    end
  end

end
