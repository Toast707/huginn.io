[
  {
    "name": "huginn_freme_enrichment_agents",
    "version": "0.2",
    "summary": "Agents for doing natural language processing using the FREME APIs.",
    "description": "Write a longer description or delete this line.",
    "license": "Apache License 2.0",
    "repository": "kreuzwerker/DKT.huginn_freme_enrichment_agents",
    "stars": 0,
    "watchers": 0,
    "agents": [
      {
        "name": "FremeExploreAgent",
        "description": "<p>The <code>FremeExploreAgent</code> can retrieve description of a resource from a given endpoint. The endpoint can be SPARQL or Linked Data Fragments endpoint.</p>\n\n<p>The Agent accepts all configuration options of the <code>/e-link/explore</code> endpoint as of September 2016, have a look at the <a href=\"http://api.freme-project.eu/doc/current/api-doc/full.html#!/e-Link/explore\">offical documentation</a> if you need additional information.</p>\n\n<p>All Agent configuration options are interpolated using <a href=\"https://github.com/cantino/huginn/wiki/Formatting-Events-using-Liquid\">Liquid</a> in the context of the received event.</p>\n\n<p><code>base_url</code> allows to customize the API server when hosting the FREME services elswhere.</p>\n\n<p><code>auth_token</code> can be set to access private filters, datasets, templates or pipelines (depending on the agent).</p>\n\n<p><code>outformat</code> requested RDF serialization format of the output (required), CSV is only supported when using a filter.</p>\n\n<p><code>resource</code> a URI of the resource which should be described (required).</p>\n\n<p><code>endpoint</code> a URL of the endpoint which should be used to retrieve info about the resource.</p>\n\n<p><code>endpoint_type</code> the type of the endpoint (required).</p>\n\n<p><code>filter</code> allows to post-process the results using a pre-configured SPARQL filter. Check the <a href=\"http://api.freme-project.eu/doc/current/knowledge-base/freme-for-api-users/filtering.html\">official documentation</a> for details.</p>\n",
        "creates_events": true,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": true,
        "form_configurable": false,
        "oauth_service": null
      }
    ]
  },
  {
    "agents": [
      {
        "name": "AdiosoAgent",
        "description": "<p>The Adioso Agent will tell you the minimum airline prices between a pair of cities, and within a certain period of time.</p>\n\n<p>The currency is USD. Please make sure that the difference between <code>start_date</code> and <code>end_date</code> is less than 150 days. You will need to contact <a href=\"http://adioso.com/\">Adioso</a>\nfor a <code>username</code> and <code>password</code>.</p>\n",
        "creates_events": true,
        "receives_events": false,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "AftershipAgent",
        "description": "<p>The Aftership agent allows you to track your shipment from aftership and emit them into events.</p>\n\n<p>To be able to use the Aftership API, you need to generate an <code>API Key</code>. You need a paying plan to use their tracking feature.</p>\n\n<p>You can use this agent to retrieve tracking data.</p>\n\n<p>Provide the <code>path</code> for the API endpoint that you’d like to hit. For example, for all active packages, enter <code>trackings</code> \n(see https://www.aftership.com/docs/api/4/trackings), for a specific package, use <code>trackings/SLUG/TRACKING_NUMBER</code> \nand replace <code>SLUG</code> with a courier code and <code>TRACKING_NUMBER</code> with the tracking number. You can request last checkpoint of a package \nby providing <code>last_checkpoint/SLUG/TRACKING_NUMBER</code> instead.</p>\n\n<p>You can get a list of courier information here <code>https://www.aftership.com/courier</code></p>\n\n<p>Required Options:</p>\n\n<ul>\n  <li><code>api_key</code> - YOUR_API_KEY.</li>\n  <li><code>path request and its full path</code></li>\n</ul>\n",
        "creates_events": true,
        "receives_events": false,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "AttributeDifferenceAgent",
        "description": "<p>The Attribute Difference Agent receives events and emits a new event with\nthe difference or change of a specific attribute in comparison to the previous\nevent received.</p>\n\n<p><code>path</code> specifies the JSON path of the attribute to be used from the event.</p>\n\n<p><code>output</code> specifies the new attribute name that will be created on the original payload\nand it will contain the difference or change.</p>\n\n<p><code>method</code> specifies if it should be…</p>\n\n<ul>\n  <li><code>percentage_change</code> eg. Previous value was <code>160</code>, new value is <code>116</code>. Percentage change is <code>-27.5</code></li>\n  <li><code>decimal_difference</code> eg. Previous value was <code>5.5</code>, new value is <code>15.2</code>. Difference is <code>9.7</code></li>\n  <li><code>integer_difference</code> eg. Previous value was <code>50</code>, new value is <code>40</code>. Difference is <code>-10</code></li>\n</ul>\n\n<p><code>decimal_precision</code> defaults to <code>3</code>, but you can override this if you want.</p>\n\n<p><code>expected_update_period_in_days</code> is used to determine if the Agent is working.</p>\n\n<p>The resulting event will be a copy of the received event with the difference\nor change added as an extra attribute. If you use the <code>percentage_change</code> the\nattribute will be formatted as such <code>{{attribute}}_change</code>, otherwise it will\nbe <code>{{attribute}}_diff</code>.</p>\n\n<p>All configuration options will be liquid interpolated based on the incoming event.</p>\n",
        "creates_events": true,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "BasecampAgent",
        "description": "<p>The Basecamp Agent checks a Basecamp project for new Events</p>\n\n<p>To be able to use this Agent you need to authenticate with 37signals in the <a href=\"/services\">Services</a> section first.</p>\n",
        "creates_events": true,
        "receives_events": false,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": "37signals"
      },
      {
        "name": "BeeperAgent",
        "description": "<p>Beeper agent sends messages to Beeper app on your mobile device via Push notifications.</p>\n\n<p>You need a Beeper Application ID (<code>app_id</code>), Beeper REST API Key (<code>api_key</code>) and Beeper Sender ID (<code>sender_id</code>) <a href=\"https://beeper.io\">https://beeper.io</a></p>\n\n<p>You have to provide phone number (<code>phone</code>) of the recipient which have a mobile device with Beeper installed, or a <code>group_id</code> – Beeper Group ID</p>\n\n<p>Also you have to provide a message <code>type</code> which has to be <code>message</code>, <code>image</code>, <code>event</code>, <code>location</code> or <code>task</code>.</p>\n\n<p>Depending on message type you have to provide additional fields:</p>\n\n<h5>Message</h5>\n<ul>\n  <li><code>text</code> – <strong>required</strong></li>\n</ul>\n\n<h5>Image</h5>\n<ul>\n  <li><code>image</code> – <strong>required</strong> (Image URL or Base64-encoded image)</li>\n  <li><code>text</code> – optional</li>\n</ul>\n\n<h5>Event</h5>\n<ul>\n  <li><code>text</code> – <strong>required</strong></li>\n  <li><code>start_time</code> – <strong>required</strong> (Corresponding to ISO 8601)</li>\n  <li><code>end_time</code> – optional (Corresponding to ISO 8601)</li>\n</ul>\n\n<h5>Location</h5>\n<ul>\n  <li><code>latitude</code> – <strong>required</strong></li>\n  <li><code>longitude</code> – <strong>required</strong></li>\n  <li><code>text</code> – optional</li>\n</ul>\n\n<h5>Task</h5>\n<ul>\n  <li><code>text</code> – <strong>required</strong></li>\n</ul>\n\n<p>You can see additional documentation at <a href=\"https://beeper.io/docs\">Beeper website</a></p>\n",
        "creates_events": false,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "BoxcarAgent",
        "description": "<p>The Boxcar agent sends push notifications to iPhone.</p>\n\n<p>To be able to use the Boxcar end-user API, you need your <code>Access Token</code>.\nThe access token is available on general “Settings” screen of Boxcar iOS\napp or from Boxcar Web Inbox settings page.</p>\n\n<p>Please provide your access token in the <code>user_credentials</code> option. If\nyou’d like to use a credential, set the <code>user_credentials</code> option to <code>{%\ncredential CREDENTIAL_NAME %}</code>.</p>\n\n<p>Options:</p>\n\n<ul>\n  <li><code>user_credentials</code> - Boxcar access token.</li>\n  <li><code>title</code> - Title of the message.</li>\n  <li><code>body</code> - Body of the message.</li>\n  <li><code>source_name</code> - Name of the source of the message. Set to <code>Huginn</code> by default.</li>\n  <li><code>icon_url</code> - URL to the icon.</li>\n  <li><code>sound</code> - Sound to be played for the notification. Set to ‘bird-1’ by default.</li>\n</ul>\n",
        "creates_events": false,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "ChangeDetectorAgent",
        "description": "<p>The Change Detector Agent receives a stream of events and emits a new event when a property of the received event changes.</p>\n\n<p><code>property</code> specifies the property to be watched.</p>\n\n<p><code>expected_update_period_in_days</code> is used to determine if the Agent is working.</p>\n\n<p>The resulting event will be a copy of the received event.</p>\n",
        "creates_events": true,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "CommanderAgent",
        "description": "<p>The Commander Agent is triggered by schedule or an incoming event, and commands other agents (“targets”) to run, disable, configure, or enable themselves.</p>\n\n<h1>Action types</h1>\n\n<p>Set <code>action</code> to one of the action types below:</p>\n\n<ul>\n  <li>\n    <p><code>run</code>: Target Agents are run when this agent is triggered.</p>\n  </li>\n  <li>\n    <p><code>disable</code>: Target Agents are disabled (if not) when this agent is triggered.</p>\n  </li>\n  <li>\n    <p><code>enable</code>: Target Agents are enabled (if not) when this agent is triggered.</p>\n  </li>\n  <li>\n    <p><code>configure</code>: Target Agents have their options updated with the contents of <code>configure_options</code>.</p>\n  </li>\n</ul>\n\n<p>Here’s a tip: you can use Liquid templating to dynamically determine the action type.  For example:</p>\n\n<ul>\n  <li>\n    <p>To create a CommanderAgent that receives an event from a WeatherAgent every morning to kick an agent flow that is only useful in a nice weather, try this: <code>{% if conditions contains 'Sunny' or conditions contains 'Cloudy' %}</code> <code>run{% endif %}</code></p>\n  </li>\n  <li>\n    <p>Likewise, if you have a scheduled agent flow specially crafted for rainy days, try this: <code>{% if conditions contains 'Rain' %}enable{% else %}disabled{% endif %}</code></p>\n  </li>\n  <li>\n    <p>If you want to update a WeatherAgent based on a UserLocationAgent, you could use <code>'action': 'configure'</code> and set ‘configure_options’ to <code>{ 'location': '{{_location_.latlng}}' }</code>.</p>\n  </li>\n</ul>\n\n<h1>Targets</h1>\n\n<p>Select Agents that you want to control from this CommanderAgent.</p>\n",
        "creates_events": false,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": true,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "CsvAgent",
        "description": "<p>The <code>CsvAgent</code> parses or serializes CSV data. When parsing, events can either be emitted for the entire CSV, or one per row.</p>\n\n<p>Set <code>mode</code> to <code>parse</code> to parse CSV from incoming event, when set to <code>serialize</code> the agent serilizes the data of events to CSV.</p>\n\n<h3>Universal options</h3>\n\n<p>Specify the <code>separator</code> which is used to seperate the fields from each other (default is <code>,</code>).</p>\n\n<p><code>data_key</code> sets the key which contains the serialized CSV or parsed CSV data in emitted events.</p>\n\n<h3>Parsing</h3>\n\n<p>If <code>use_fields</code> is set to a comma seperated string and the CSV file contains field headers the agent will only extract the specified fields.</p>\n\n<p><code>output</code> determines wheather one event per row is emitted or one event that includes all the rows.</p>\n\n<p>Set <code>with_header</code> to <code>true</code> if first line of the CSV file are field names.</p>\n\n<p>This agent can consume a ‘file pointer’ event from the following agents with no additional configuration: <code>FtpsiteAgent</code>, <code>LocalFileAgent</code>, <code>S3Agent</code>. Read more about the concept in the <a href=\"https://github.com/cantino/huginn/wiki/How-Huginn-works-with-files\">wiki</a>.</p>\n\n<p>When receiving the CSV data in a regular event use <a href=\"http://goessner.net/articles/JsonPath/\">JSONPath</a> to select the path in <code>data_path</code>. <code>data_path</code> is only used when the received event does not contain a ‘file pointer’.</p>\n\n<h3>Serializing</h3>\n\n<p>If <code>use_fields</code> is set to a comma seperated string and the first received event has a object at the specified <code>data_path</code> the generated CSV will only include the given fields.</p>\n\n<p>Set <code>with_header</code> to <code>true</code> to include a field header in the CSV.</p>\n\n<p>Use <a href=\"http://goessner.net/articles/JsonPath/\">JSONPath</a> in <code>data_path</code> to select with part of the received events should be serialized.</p>\n",
        "creates_events": true,
        "receives_events": true,
        "consumes_file_pointer": true,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "DataOutputAgent",
        "description": "<p>The Data Output Agent outputs received events as either RSS or JSON.  Use it to output a public or private stream of Huginn data.</p>\n\n<p>This Agent will output data at:</p>\n\n<p><code>https://localhost:3000/users/1/web_requests/:id/:secret.xml</code></p>\n\n<p>where <code>:secret</code> is one of the allowed secrets specified in your options and the extension can be <code>xml</code> or <code>json</code>.</p>\n\n<p>You can setup multiple secrets so that you can individually authorize external systems to\naccess your Huginn data.</p>\n\n<p>Options:</p>\n\n<ul>\n  <li><code>secrets</code> - An array of tokens that the requestor must provide for light-weight authentication.</li>\n  <li><code>expected_receive_period_in_days</code> - How often you expect data to be received by this Agent from other Agents.</li>\n  <li><code>template</code> - A JSON object representing a mapping between item output keys and incoming event values.  Use <a href=\"https://github.com/cantino/huginn/wiki/Formatting-Events-using-Liquid\">Liquid</a> to format the values.  Values of the <code>link</code>, <code>title</code>, <code>description</code> and <code>icon</code> keys will be put into the &lt;channel&gt; section of RSS output.  Value of the <code>self</code> key will be used as URL for this feed itself, which is useful when you serve it via reverse proxy.  The <code>item</code> key will be repeated for every Event.  The <code>pubDate</code> key for each item will have the creation time of the Event unless given.</li>\n  <li><code>events_to_show</code> - The number of events to output in RSS or JSON. (default: <code>40</code>)</li>\n  <li><code>ttl</code> - A value for the &lt;ttl&gt; element in RSS output. (default: <code>60</code>)</li>\n  <li><code>ns_media</code> - Add <a href=\"https://en.wikipedia.org/wiki/Media_RSS\">yahoo media namespace</a> in output xml</li>\n  <li><code>ns_itunes</code> - Add <a href=\"http://lists.apple.com/archives/syndication-dev/2005/Nov/msg00002.html\">itunes compatible namespace</a> in output xml</li>\n  <li><code>push_hubs</code> - Set to a list of PubSubHubbub endpoints you want to publish an update to every time this agent receives an event. (default: none)  Popular hubs include <a href=\"https://pubsubhubbub.superfeedr.com/\">Superfeedr</a> and <a href=\"https://pubsubhubbub.appspot.com/\">Google</a>.  Note that publishing updates will make your feed URL known to the public, so if you want to keep it secret, set up a reverse proxy to serve your feed via a safe URL and specify it in <code>template.self</code>.</li>\n</ul>\n\n<p>If you’d like to output RSS tags with attributes, such as <code>enclosure</code>, use something like the following in your <code>template</code>:</p>\n\n<pre><code>\"enclosure\": {\n  \"_attributes\": {\n    \"url\": \"{{media_url}}\",\n    \"length\": \"1234456789\",\n    \"type\": \"audio/mpeg\"\n  }\n},\n\"another_tag\": {\n  \"_attributes\": {\n    \"key\": \"value\",\n    \"another_key\": \"another_value\"\n  },\n  \"_contents\": \"tag contents (can be an object for nesting)\"\n}\n</code></pre>\n\n<h1>Ordering events</h1>\n\n<p>To specify the order of events, set <code>events_order</code> to an array of sort keys, each of which looks like either <code>expression</code> or <code>[expression, type, descending]</code>, as described as follows:</p>\n\n<ul>\n  <li>\n    <p><em>expression</em> is a Liquid template to generate a string to be used as sort key.</p>\n  </li>\n  <li>\n    <p><em>type</em> (optional) is one of <code>string</code> (default), <code>number</code> and <code>time</code>, which specifies how to evaluate <em>expression</em> for comparison.</p>\n  </li>\n  <li>\n    <p><em>descending</em> (optional) is a boolean value to determine if comparison should be done in descending (reverse) order, which defaults to <code>false</code>.</p>\n  </li>\n</ul>\n\n<p>Sort keys listed earlier take precedence over ones listed later.  For example, if you want to sort articles by the date and then by the author, specify <code>[[\"{{date}}\", \"time\"], \"{{author}}\"]</code>.</p>\n\n<p>Sorting is done stably, so even if all events have the same set of sort key values the original order is retained.  Also, a special Liquid variable <code>_index_</code> is provided, which contains the zero-based index number of each event, which means you can exactly reverse the order of events by specifying <code>[[\"{{_index_}}\", \"number\", true]]</code>.</p>\n\n<p>DataOutputAgent will select the last <code>events_to_show</code> entries of its received events sorted in the order specified by <code>events_order</code>, which is defaulted to the event creation time.\nSo, if you have multiple source agents that may create many events in a run, you may want to either increase <code>events_to_show</code> to have a larger “window”, or specify the <code>events_order</code> option to an appropriate value (like <code>date_published</code>) so events from various sources are properly mixed in the resulted feed.</p>\n\n<p>There is also an option <code>events_list_order</code> that only controls the order of events listed in the final output, without attempting to maintain a total order of received events.  It has the same format as <code>events_order</code> and is defaulted to <code>[[\"{{_index_}}\",\"number\",true]]</code> so the selected events are listed in reverse order like most popular RSS feeds list their articles.</p>\n\n<h1>Liquid Templating</h1>\n\n<p>In Liquid templating, the following variable is available:</p>\n\n<ul>\n  <li><code>events</code>: An array of events being output, sorted in the given order, up to <code>events_to_show</code> in number.  For example, if source events contain a site title in the <code>site_title</code> key, you can refer to it in <code>template.title</code> by putting <code>{{events.first.site_title}}</code>.</li>\n</ul>\n",
        "creates_events": false,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "DeDuplicationAgent",
        "description": "<p>The De-duplication Agent receives a stream of events and remits the event if it is not a duplicate.</p>\n\n<p><code>property</code> the value that should be used to determine the uniqueness of the event (empty to use the whole payload)</p>\n\n<p><code>lookback</code> amount of past Events to compare the value to (0 for unlimited)</p>\n\n<p><code>expected_update_period_in_days</code> is used to determine if the Agent is working.</p>\n",
        "creates_events": true,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "DelayAgent",
        "description": "<p>The DelayAgent stores received Events and emits copies of them on a schedule. Use this as a buffer or queue of Events.</p>\n\n<p><code>max_events</code> should be set to the maximum number of events that you’d like to hold in the buffer. When this number is\nreached, new events will either be ignored, or will displace the oldest event already in the buffer, depending on\nwhether you set <code>keep</code> to <code>newest</code> or <code>oldest</code>.</p>\n\n<p><code>expected_receive_period_in_days</code> is used to determine if the Agent is working. Set it to the maximum number of days\nthat you anticipate passing without this Agent receiving an incoming Event.</p>\n\n<p><code>max_emitted_events</code> is used to limit the number of the maximum events which should be created. If you omit this DelayAgent will create events for every event stored in the memory.</p>\n",
        "creates_events": true,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "DigestAgent",
        "description": "<p>The Digest Agent collects any Events sent to it and emits them as a single event.</p>\n\n<p>The resulting Event will have a payload message of <code>message</code>. You can use liquid templating in the <code>message</code>, have a look at the <a href=\"https://github.com/cantino/huginn/wiki/Formatting-Events-using-Liquid\">Wiki</a> for details.</p>\n\n<p>Set <code>expected_receive_period_in_days</code> to the maximum amount of time that you’d expect to pass between Events being received by this Agent.</p>\n",
        "creates_events": true,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "DropboxFileUrlAgent",
        "description": "<p>The <em>DropboxFileUrlAgent</em> is used to work with Dropbox. It takes a file path (or multiple files paths) and emits events with either <a href=\"https://www.dropbox.com/developers/core/docs#media\">temporary links</a> or <a href=\"https://www.dropbox.com/developers/core/docs#shares\">permanent links</a>.</p>\n\n<h2>Include the <code>dropbox-api</code> and <code>omniauth-dropbox</code> gems in your <code>Gemfile</code> and set <code>DROPBOX_OAUTH_KEY</code> and <code>DROPBOX_OAUTH_SECRET</code> in your environment to use Dropbox Agents.</h2>\n\n<p>The incoming event payload needs to have a <code>paths</code> key, with a comma-separated list of files you want the URL for. For example:</p>\n\n<pre><code>{\n  \"paths\": \"first/path, second/path\"\n}\n</code></pre>\n\n<p><strong>TIP</strong>: You can use the <em>Event Formatting Agent</em> to format events before they come in. Here’s an example configuration for formatting an event coming out of a <em>Dropbox Watch Agent</em>:</p>\n\n<pre><code>{\n  \"instructions\": {\n    \"paths\": \"{{ added | map: 'path' | join: ',' }}\"\n  },\n  \"matchers\": [],\n  \"mode\": \"clean\"\n}\n</code></pre>\n\n<p>An example of usage would be to watch a specific Dropbox directory (with the <em>DropboxWatchAgent</em>) and get the URLs for the added or updated files. You could then, for example, send emails with those links.</p>\n\n<p>Set <code>link_type</code> to <code>'temporary'</code> if you want temporary links, or to <code>'permanent'</code> for permanent ones.</p>\n",
        "creates_events": true,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": "dropbox"
      },
      {
        "name": "DropboxWatchAgent",
        "description": "<p>The Dropbox Watch Agent watches the given <code>dir_to_watch</code> and emits events with the detected changes.</p>\n\n<h2>Include the <code>dropbox-api</code> and <code>omniauth-dropbox</code> gems in your <code>Gemfile</code> and set <code>DROPBOX_OAUTH_KEY</code> and <code>DROPBOX_OAUTH_SECRET</code> in your environment to use Dropbox Agents.</h2>\n",
        "creates_events": true,
        "receives_events": false,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": "dropbox"
      },
      {
        "name": "EmailAgent",
        "description": "<p>The Email Agent sends any events it receives via email immediately.</p>\n\n<p>You can specify the email’s subject line by providing a <code>subject</code> option, which can contain Liquid formatting.  E.g.,\nyou could provide <code>\"Huginn email\"</code> to set a simple subject, or <code>{{subject}}</code> to use the <code>subject</code> key from the incoming Event.</p>\n\n<p>By default, the email body will contain an optional <code>headline</code>, followed by a listing of the Events’ keys.</p>\n\n<p>You can customize the email body by including the optional <code>body</code> param.  Like the <code>subject</code>, the <code>body</code> can be a simple message\nor a Liquid template.  You could send only the Event’s <code>some_text</code> field with a <code>body</code> set to <code>{{ some_text }}</code>.\nThe body can contain simple HTML and will be sanitized. Note that when using <code>body</code>, it will be wrapped with <code>&lt;html&gt;</code> and <code>&lt;body&gt;</code> tags,\nso you do not need to add these yourself.</p>\n\n<p>You can specify one or more <code>recipients</code> for the email, or skip the option in order to send the email to your\naccount’s default email address.</p>\n\n<p>You can provide a <code>from</code> address for the email, or leave it blank to default to the value of <code>EMAIL_FROM_ADDRESS</code> (<code>from_address@gmail.com</code>).</p>\n\n<p>You can provide a <code>content_type</code> for the email and specify <code>text/plain</code> or <code>text/html</code> to be sent.\nIf you do not specify <code>content_type</code>, then the recipient email server will determine the correct rendering.</p>\n\n<p>Set <code>expected_receive_period_in_days</code> to the maximum amount of time that you’d expect to pass between Events being received by this Agent.</p>\n",
        "creates_events": false,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "EmailDigestAgent",
        "description": "<p>The Email Digest Agent collects any Events sent to it and sends them all via email when scheduled. The number of\nused events also relies on the <code>Keep events</code> option of the emitting Agent, meaning that if events expire before\nthis agent is scheduled to run, they will not appear in the email.</p>\n\n<p>By default, the will have a <code>subject</code> and an optional <code>headline</code> before listing the Events.  If the Events’\npayloads contain a <code>message</code>, that will be highlighted, otherwise everything in\ntheir payloads will be shown.</p>\n\n<p>You can specify one or more <code>recipients</code> for the email, or skip the option in order to send the email to your\naccount’s default email address.</p>\n\n<p>You can provide a <code>from</code> address for the email, or leave it blank to default to the value of <code>EMAIL_FROM_ADDRESS</code> (<code>from_address@gmail.com</code>).</p>\n\n<p>You can provide a <code>content_type</code> for the email and specify <code>text/plain</code> or <code>text/html</code> to be sent.\nIf you do not specify <code>content_type</code>, then the recipient email server will determine the correct rendering.</p>\n\n<p>Set <code>expected_receive_period_in_days</code> to the maximum amount of time that you’d expect to pass between Events being received by this Agent.</p>\n",
        "creates_events": false,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "EventFormattingAgent",
        "description": "<p>The Event Formatting Agent allows you to format incoming Events, adding new fields as needed.</p>\n\n<p>For example, here is a possible Event:</p>\n\n<pre><code>{\n  \"high\": {\n    \"celsius\": \"18\",\n    \"fahreinheit\": \"64\"\n  },\n  \"date\": {\n    \"epoch\": \"1357959600\",\n    \"pretty\": \"10:00 PM EST on January 11, 2013\"\n  },\n  \"conditions\": \"Rain showers\",\n  \"data\": \"This is some data\"\n}\n</code></pre>\n\n<p>You may want to send this event to another Agent, for example a Twilio Agent, which expects a <code>message</code> key.\nYou can use an Event Formatting Agent’s <code>instructions</code> setting to do this in the following way:</p>\n\n<pre><code>\"instructions\": {\n  \"message\": \"Today's conditions look like {{conditions}} with a high temperature of {{high.celsius}} degrees Celsius.\",\n  \"subject\": \"{{data}}\",\n  \"created_at\": \"{{created_at}}\"\n}\n</code></pre>\n\n<p>Names here like <code>conditions</code>, <code>high</code> and <code>data</code> refer to the corresponding values in the Event hash.</p>\n\n<p>The special key <code>created_at</code> refers to the timestamp of the Event, which can be reformatted by the <code>date</code> filter, like <code>{{created_at | date:\"at %I:%M %p\" }}</code>.</p>\n\n<p>The upstream agent of each received event is accessible via the key <code>agent</code>, which has the following attributes: <code>name</code>, <code>options</code>, <code>sources</code>, <code>type</code>, <code>disabled</code>, <code>memory</code>, <code>controllers</code>, <code>schedule</code>, <code>keep_events_for</code>, <code>propagate_immediately</code>, <code>receivers</code>, <code>control_targets</code>.</p>\n\n<p>Have a look at the <a href=\"https://github.com/cantino/huginn/wiki/Formatting-Events-using-Liquid\">Wiki</a> to learn more about liquid templating.</p>\n\n<p>Events generated by this possible Event Formatting Agent will look like:</p>\n\n<pre><code>{\n  \"message\": \"Today's conditions look like Rain showers with a high temperature of 18 degrees Celsius.\",\n  \"subject\": \"This is some data\"\n}\n</code></pre>\n\n<p>In <code>matchers</code> setting you can perform regular expression matching against contents of events and expand the match data for use in <code>instructions</code> setting.  Here is an example:</p>\n\n<pre><code>{\n  \"matchers\": [\n    {\n      \"path\": \"{{date.pretty}}\",\n      \"regexp\": \"\\A(?&lt;time&gt;\\d\\d:\\d\\d [AP]M [A-Z]+)\",\n      \"to\": \"pretty_date\"\n    }\n  ]\n}\n</code></pre>\n\n<p>This virtually merges the following hash into the original event hash:</p>\n\n<pre><code>\"pretty_date\": {\n  \"time\": \"10:00 PM EST\",\n  \"0\": \"10:00 PM EST on January 11, 2013\"\n  \"1\": \"10:00 PM EST\"\n}\n</code></pre>\n\n<p>So you can use it in <code>instructions</code> like this:</p>\n\n<pre><code>\"instructions\": {\n  \"message\": \"Today's conditions look like {{conditions}} with a high temperature of {{high.celsius}} degrees Celsius according to the forecast at {{pretty_date.time}}.\",\n  \"subject\": \"{{data}}\"\n}\n</code></pre>\n\n<p>If you want to retain original contents of events and only add new keys, then set <code>mode</code> to <code>merge</code>, otherwise set it to <code>clean</code>.</p>\n\n<p>To CGI escape output (for example when creating a link), use the Liquid <code>uri_escape</code> filter, like so:</p>\n\n<pre><code>{\n  \"message\": \"A peak was on Twitter in {{group_by}}.  Search: https://twitter.com/search?q={{group_by | uri_escape}}\"\n}\n</code></pre>\n",
        "creates_events": true,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": true,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "EvernoteAgent",
        "description": "<p>The Evernote Agent connects with a user’s Evernote note store.</p>\n\n<p>Visit <a href=\"https://dev.evernote.com/doc/\">Evernote</a> to set up an Evernote app and receive an api key and secret.\nStore these in the Evernote environment variables in the .env file.\nYou will also need to create a <a href=\"https://sandbox.evernote.com/Registration.action\">Sandbox</a> account to use during development.</p>\n\n<p>Next, you’ll need to authenticate with Evernote in the <a href=\"/services\">Services</a> section.</p>\n\n<p>Options:</p>\n\n<ul>\n  <li>\n    <p><code>mode</code> - Two possible values:</p>\n\n    <ul>\n      <li>\n        <p><code>update</code> Based on events it receives, the agent will create notes\n         or update notes with the same <code>title</code> and <code>notebook</code></p>\n      </li>\n      <li>\n        <p><code>read</code>   On a schedule, it will generate events containing data for newly\n         added or updated notes</p>\n      </li>\n    </ul>\n  </li>\n  <li>\n    <p><code>include_xhtml_content</code> - Set to <code>true</code> to include the content in ENML (Evernote Markup Language) of the note</p>\n  </li>\n  <li>\n    <p><code>note</code></p>\n\n    <ul>\n      <li>\n        <p>When <code>mode</code> is <code>update</code> the parameters of <code>note</code> are the attributes of the note to be added/edited.\nTo edit a note, both <code>title</code> and <code>notebook</code> must be set.</p>\n\n        <p>For example, to add the tags ‘comic’ and ‘CS’ to a note titled ‘xkcd Survey’ in the notebook ‘xkcd’, use:</p>\n\n        <pre><code>\"notes\": {\n  \"title\": \"xkcd Survey\",\n  \"content\": \"\",\n  \"notebook\": \"xkcd\",\n  \"tagNames\": \"comic, CS\"\n}\n</code></pre>\n\n        <p>If a note with the above title and notebook did note exist already, one would be created.</p>\n      </li>\n      <li>\n        <p>When <code>mode</code> is <code>read</code> the values are search parameters.\nNote: The <code>content</code> parameter is not used for searching. Setting <code>title</code> only filters\nnotes whose titles contain <code>title</code> as a substring, not as the exact title.</p>\n\n        <p>For example, to find all notes with tag ‘CS’ in the notebook ‘xkcd’, use:</p>\n\n        <pre><code>\"notes\": {\n  \"title\": \"\",\n  \"content\": \"\",\n  \"notebook\": \"xkcd\",\n  \"tagNames\": \"CS\"\n}\n</code></pre>\n      </li>\n    </ul>\n  </li>\n</ul>\n",
        "creates_events": true,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": "evernote"
      },
      {
        "name": "FtpsiteAgent",
        "description": "<p>The Ftp Site Agent checks an FTP site and creates Events based on newly uploaded files in a directory. When receiving events it creates files on the configured FTP server.</p>\n\n<p><code>mode</code> must be present and either <code>read</code> or <code>write</code>, in <code>read</code> mode the agent checks the FTP site for changed files, with <code>write</code> it writes received events to a file on the server.</p>\n\n<h3>Universal options</h3>\n\n<p>Specify a <code>url</code> that represents a directory of an FTP site to watch, and a list of <code>patterns</code> to match against file names.</p>\n\n<p>Login credentials can be included in <code>url</code> if authentication is required: <code>ftp://username:password@ftp.example.com/path</code>. Liquid formatting is supported as well: <code>ftp://{% credential ftp_credentials %}@ftp.example.com/</code></p>\n\n<p>Optionally specify the encoding of the files you want to read/write in <code>force_encoding</code>, by default UTF-8 is used.</p>\n\n<h3>Reading</h3>\n\n<p>Only files with a last modification time later than the <code>after</code> value, if specifed, are emitted as event.</p>\n\n<h3>Writing</h3>\n\n<p>Specify the filename to use in <code>filename</code>, Liquid interpolation is possible to change the name per event.</p>\n\n<p>Use <a href=\"https://github.com/cantino/huginn/wiki/Formatting-Events-using-Liquid\">Liquid</a> templating in <code>data</code> to specify which part of the received event should be written.</p>\n\n<p>This agent only emits a ‘file pointer’, not the data inside the files, the following agents can consume the created events: <code>CsvAgent</code>, <code>ReadFileAgent</code>. Read more about the concept in the <a href=\"https://github.com/cantino/huginn/wiki/How-Huginn-works-with-files\">wiki</a>.</p>\n",
        "creates_events": true,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": true,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "GapDetectorAgent",
        "description": "<p>The Gap Detector Agent will watch for holes or gaps in a stream of incoming Events and generate “no data alerts”.</p>\n\n<p>The <code>value_path</code> value is a <a href=\"http://goessner.net/articles/JsonPath/\">JSONPath</a> to a value of interest. If either\nthis value is empty, or no Events are received, during <code>window_duration_in_days</code>, an Event will be created with\na payload of <code>message</code>.</p>\n",
        "creates_events": true,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "GoogleCalendarPublishAgent",
        "description": "<p>The Google Calendar Publish Agent creates events on your Google Calendar.</p>\n\n<p>This agent relies on service accounts, rather than oauth.</p>\n\n<p>Setup:</p>\n\n<ol>\n  <li>Visit <a href=\"https://code.google.com/apis/console/b/0/\">the google api console</a></li>\n  <li>New project -&gt; Huginn</li>\n  <li>APIs &amp; Auth -&gt; Enable google calendar</li>\n  <li>Credentials -&gt; Create new Client ID -&gt; Service Account</li>\n  <li>Persist the generated private key to a path, ie: <code>/home/huginn/a822ccdefac89fac6330f95039c492dfa3ce6843.p12</code></li>\n  <li>Grant access via google calendar UI to the service account email address for each calendar you wish to manage. For a whole google apps domain, you can <a href=\"https://developers.google.com/+/domains/authentication/delegation\">delegate authority</a></li>\n</ol>\n\n<p>Agent Configuration:</p>\n\n<p><code>calendar_id</code> - The id the calendar you want to publish to. Typically your google account email address.  Liquid formatting (e.g. <code>{{ cal_id }}</code>) is allowed here in order to extract the calendar_id from the incoming event.</p>\n\n<p><code>google</code> A hash of configuration options for the agent.</p>\n\n<p><code>google</code> <code>service_account_email</code> - The authorised service account.</p>\n\n<p><code>google</code> <code>key_file</code> OR <code>google</code> <code>key</code> - The path to the key file or the key itself.  Liquid formatting is supported if you want to use a Credential.  (E.g., <code>{% credential google_key %}</code>)</p>\n\n<p><code>google</code> <code>key_secret</code> - The secret for the key, typically ‘notasecret’</p>\n\n<p>Set <code>expected_update_period_in_days</code> to the maximum amount of time that you’d expect to pass between Events being created by this Agent.</p>\n\n<p>Use it with a trigger agent to shape your payload!</p>\n\n<p>A hash of event details. See the <a href=\"https://developers.google.com/google-apps/calendar/v3/reference/events/insert\">Google Calendar API docs</a></p>\n\n<p>Example payload for trigger agent:</p>\n<pre><code>{\n  \"message\": {\n    \"visibility\": \"default\",\n    \"summary\": \"Awesome event\",\n    \"description\": \"An example event with text. Pro tip: DateTimes are in RFC3339\",\n    \"start\": {\n      \"dateTime\": \"2014-10-02T10:00:00-05:00\"\n    },\n    \"end\": {\n      \"dateTime\": \"2014-10-02T11:00:00-05:00\"\n    }\n  }\n}</code></pre>\n",
        "creates_events": true,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "GoogleFlightsAgent",
        "description": "<p>The GoogleFlightsAgent will tell you the minimum airline prices between a pair of cities. The api limit is 50 requests/day.</p>\n\n<p>Follow their documentation here (https://developers.google.com/qpx-express/v1/prereqs#get-a-google-account) to retrieve an api key.\nAfter you get to the google developer console, created a project, enabled qpx express api then you can choose <code>api key</code> credential to be created.</p>\n\n<p>The <code>origin</code> and <code>destination</code> options require an <a href=\"http://www.expedia.com/daily/airports/AirportCodes.asp\">airport code</a>.</p>\n\n<p>All the default options must exist. For <code>infantInSeatCount</code>, <code>infantInLapCount</code>, <code>seniorCount</code>, and <code>childCount</code>, leave them to the default value of <code>0</code> if you do not need them.</p>\n\n<p>Make sure <code>date</code> and <code>return_date</code> is in this date format: <code>YYYY-MM-DAY</code>.</p>\n\n<p>You can choose one way tickets only by setting <code>roundtrip</code> to <code>false</code>.</p>\n\n<p>You can limit the number of <code>solutions</code> returned. The first solution will be the lowest priced ticket.</p>\n",
        "creates_events": true,
        "receives_events": false,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "GrowlAgent",
        "description": "<p>The Growl Agent sends any events it receives to a Growl GNTP server immediately.</p>\n\n<p>It is assumed that events have a <code>message</code> or <code>text</code> key, which will hold the body of the growl notification, and a <code>subject</code> key, which will have the headline of the Growl notification. You can use Event Formatting Agent if your event does not provide these keys.</p>\n\n<p>Set <code>expected_receive_period_in_days</code> to the maximum amount of time that you’d expect to pass between Events being received by this Agent.</p>\n",
        "creates_events": false,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "HipchatAgent",
        "description": "<p>The Hipchat Agent sends messages to a Hipchat Room</p>\n\n<p>To authenticate you need to set the <code>auth_token</code>, you can get one at your Hipchat Group Admin page which you can find here:</p>\n\n<p><code>https://</code>yoursubdomain<code>.hipchat.com/admin/api</code></p>\n\n<p>Change the <code>room_name</code> to the name of the room you want to send notifications to.</p>\n\n<p>You can provide a <code>username</code> and a <code>message</code>. If you want to use mentions change <code>format</code> to “text” (<a href=\"https://www.hipchat.com/docs/api/method/rooms/message\">details</a>).</p>\n\n<p>If you want your message to notify the room members change <code>notify</code> to “True”.</p>\n\n<p>Modify the background color of your message via the <code>color</code> attribute (one of “yellow”, “red”, “green”, “purple”, “gray”, or “random”)</p>\n\n<p>Have a look at the <a href=\"https://github.com/cantino/huginn/wiki/Formatting-Events-using-Liquid\">Wiki</a> to learn more about liquid templating.</p>\n",
        "creates_events": false,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "HttpStatusAgent",
        "description": "<p>The HttpStatusAgent will check a url and emit the resulting HTTP status code with the time that it waited for a reply. Additionally, it will optionally emit the value of one or more specified headers.</p>\n\n<p>Specify a <code>Url</code> and the Http Status Agent will produce an event with the HTTP status code. If you specify one or more <code>Headers to save</code> (comma-delimited) as well, that header or headers’ value(s) will be included in the event.</p>\n\n<p>The <code>disable redirect follow</code> option causes the Agent to not follow HTTP redirects. For example, setting this to <code>true</code> will cause an agent that receives a 301 redirect to <code>http://yahoo.com</code> to return a status of 301 instead of following the redirect and returning 200.</p>\n\n<p>The <code>changes only</code> option causes the Agent to report an event only when the status changes. If set to false, an event will be created for every check.  If set to true, an event will only be created when the status changes (like if your site goes from 200 to 500).</p>\n",
        "creates_events": true,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": true,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "HumanTaskAgent",
        "description": "<p>The Human Task Agent is used to create Human Intelligence Tasks (HITs) on Mechanical Turk.</p>\n\n<p>HITs can be created in response to events, or on a schedule.  Set <code>trigger_on</code> to either <code>schedule</code> or <code>event</code>.</p>\n\n<h1>Schedule</h1>\n\n<p>The schedule of this Agent is how often it should check for completed HITs, <strong>NOT</strong> how often to submit one.  To configure how often a new HIT\nshould be submitted when in <code>schedule</code> mode, set <code>submission_period</code> to a number of hours.</p>\n\n<h1>Example</h1>\n\n<p>If created with an event, all HIT fields can contain interpolated values via <a href=\"https://github.com/cantino/huginn/wiki/Formatting-Events-using-Liquid\">liquid templating</a>.\nFor example, if the incoming event was a Twitter event, you could make a HITT to rate its sentiment like this:</p>\n\n<pre><code>{\n  \"expected_receive_period_in_days\": 2,\n  \"trigger_on\": \"event\",\n  \"hit\": {\n    \"assignments\": 1,\n    \"title\": \"Sentiment evaluation\",\n    \"description\": \"Please rate the sentiment of this message: '{{message}}'\",\n    \"reward\": 0.05,\n    \"lifetime_in_seconds\": \"3600\",\n    \"questions\": [\n      {\n        \"type\": \"selection\",\n        \"key\": \"sentiment\",\n        \"name\": \"Sentiment\",\n        \"required\": \"true\",\n        \"question\": \"Please select the best sentiment value:\",\n        \"selections\": [\n          { \"key\": \"happy\", \"text\": \"Happy\" },\n          { \"key\": \"sad\", \"text\": \"Sad\" },\n          { \"key\": \"neutral\", \"text\": \"Neutral\" }\n        ]\n      },\n      {\n        \"type\": \"free_text\",\n        \"key\": \"feedback\",\n        \"name\": \"Have any feedback for us?\",\n        \"required\": \"false\",\n        \"question\": \"Feedback\",\n        \"default\": \"Type here...\",\n        \"min_length\": \"2\",\n        \"max_length\": \"2000\"\n      }\n    ]\n  }\n}\n</code></pre>\n\n<p>As you can see, you configure the created HIT with the <code>hit</code> option.  Required fields are <code>title</code>, which is the\ntitle of the created HIT, <code>description</code>, which is the description of the HIT, and <code>questions</code> which is an array of\nquestions.  Questions can be of <code>type</code> <em>selection</em> or <em>free_text</em>.  Both types require the <code>key</code>, <code>name</code>, <code>required</code>,\n<code>type</code>, and <code>question</code> configuration options.  Additionally, <em>selection</em> requires a <code>selections</code> array of options, each of\nwhich contain <code>key</code> and <code>text</code>.  For <em>free_text</em>, the special configuration options are all optional, and are\n<code>default</code>, <code>min_length</code>, and <code>max_length</code>.</p>\n\n<p>By default, all answers are emitted in a single event.  If you’d like separate events for each answer, set <code>separate_answers</code> to <code>true</code>.</p>\n\n<h1>Combining answers</h1>\n\n<p>There are a couple of ways to combine HITs that have multiple <code>assignments</code>, all of which involve setting <code>combination_mode</code> at the top level.</p>\n\n<h2>Taking the majority</h2>\n\n<p>Option 1: if all of your <code>questions</code> are of <code>type</code> <em>selection</em>, you can set <code>combination_mode</code> to <code>take_majority</code>.\nThis will cause the Agent to automatically select the majority vote for each question across all <code>assignments</code> and return it as <code>majority_answer</code>.\nIf all selections are numeric, an <code>average_answer</code> will also be generated.</p>\n\n<p>Option 2: you can have the Agent ask additional human workers to rank the <code>assignments</code> and return the most highly ranked answer.\nTo do this, set <code>combination_mode</code> to <code>poll</code> and provide a <code>poll_options</code> object.  Here is an example:</p>\n\n<pre><code>{\n  \"trigger_on\": \"schedule\",\n  \"submission_period\": 12,\n  \"combination_mode\": \"poll\",\n  \"poll_options\": {\n    \"title\": \"Take a poll about some jokes\",\n    \"instructions\": \"Please rank these jokes from most funny (5) to least funny (1)\",\n    \"assignments\": 3,\n    \"row_template\": \"{{joke}}\"\n  },\n  \"hit\": {\n    \"assignments\": 5,\n    \"title\": \"Tell a joke\",\n    \"description\": \"Please tell me a joke\",\n    \"reward\": 0.05,\n    \"lifetime_in_seconds\": \"3600\",\n    \"questions\": [\n      {\n        \"type\": \"free_text\",\n        \"key\": \"joke\",\n        \"name\": \"Your joke\",\n        \"required\": \"true\",\n        \"question\": \"Joke\",\n        \"min_length\": \"2\",\n        \"max_length\": \"2000\"\n      }\n    ]\n  }\n}\n</code></pre>\n\n<p>Resulting events will have the original <code>answers</code>, as well as the <code>poll</code> results, and a field called <code>best_answer</code> that contains the best answer as determined by the poll.  (Note that <code>separate_answers</code> won’t work when doing a poll.)</p>\n\n<h1>Other settings</h1>\n\n<p><code>lifetime_in_seconds</code> is the number of seconds a HIT is left on Amazon before it’s automatically closed.  The default is 1 day.</p>\n\n<p>As with most Agents, <code>expected_receive_period_in_days</code> is required if <code>trigger_on</code> is set to <code>event</code>.</p>\n",
        "creates_events": true,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "ImapFolderAgent",
        "description": "<p>The Imap Folder Agent checks an IMAP server in specified folders and creates Events based on new mails found since the last run. In the first visit to a folder, this agent only checks for the initial status and does not create events.</p>\n\n<p>Specify an IMAP server to connect with <code>host</code>, and set <code>ssl</code> to true if the server supports IMAP over SSL.  Specify <code>port</code> if you need to connect to a port other than standard (143 or 993 depending on the <code>ssl</code> value).</p>\n\n<p>Specify login credentials in <code>username</code> and <code>password</code>.</p>\n\n<p>List the names of folders to check in <code>folders</code>.</p>\n\n<p>To narrow mails by conditions, build a <code>conditions</code> hash with the following keys:</p>\n\n<ul>\n  <li><code>subject</code></li>\n  <li>\n    <p><code>body</code>\n  Specify a regular expression to match against the decoded subject/body of each mail.</p>\n\n    <p>Use the <code>(?i)</code> directive for case-insensitive search.  For example, a pattern <code>(?i)alert</code> will match “alert”, “Alert”or “ALERT”.  You can also make only a part of a pattern to work case-insensitively: <code>Re: (?i:alert)</code> will match either “Re: Alert” or “Re: alert”, but not “RE: alert”.</p>\n\n    <p>When a mail has multiple non-attachment text parts, they are prioritized according to the <code>mime_types</code> option (which see below) and the first part that matches a “body” pattern, if specified, will be chosen as the “body” value in a created event.</p>\n\n    <p>Named captures will appear in the “matches” hash in a created event.</p>\n  </li>\n  <li>\n    <p><code>from</code>, <code>to</code>, <code>cc</code>\n  Specify a shell glob pattern string that is matched against mail addresses extracted from the corresponding header values of each mail.</p>\n\n    <p>Patterns match addresses in case insensitive manner.</p>\n\n    <p>Multiple pattern strings can be specified in an array, in which case a mail is selected if any of the patterns matches. (i.e. patterns are OR’d)</p>\n  </li>\n  <li>\n    <p><code>mime_types</code>\n  Specify an array of MIME types to tell which non-attachment part of a mail among its text/* parts should be used as mail body.  The default value is <code>['text/plain', 'text/enriched', 'text/html']</code>.</p>\n  </li>\n  <li>\n    <p><code>is_unread</code>\n  Setting this to true or false means only mails that is marked as unread or read respectively, are selected.</p>\n\n    <p>If this key is unspecified or set to null, it is ignored.</p>\n  </li>\n  <li>\n    <p><code>has_attachment</code></p>\n\n    <p>Setting this to true or false means only mails that does or does not have an attachment are selected.</p>\n\n    <p>If this key is unspecified or set to null, it is ignored.</p>\n  </li>\n</ul>\n\n<p>Set <code>mark_as_read</code> to true to mark found mails as read.</p>\n\n<p>Each agent instance memorizes the highest UID of mails that are found in the last run for each watched folder, so even if you change a set of conditions so that it matches mails that are missed previously, or if you alter the flag status of already found mails, they will not show up as new events.</p>\n\n<p>Also, in order to avoid duplicated notification it keeps a list of Message-Id’s of 100 most recent mails, so if multiple mails of the same Message-Id are found, you will only see one event out of them.</p>\n",
        "creates_events": true,
        "receives_events": false,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": true,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "JabberAgent",
        "description": "<p>The Jabber Agent will send any events it receives to your Jabber/XMPP IM account.</p>\n\n<p>Specify the <code>jabber_server</code> and <code>jabber_port</code> for your Jabber server.</p>\n\n<p>The <code>message</code> is sent from <code>jabber_sender</code> to <code>jaber_receiver</code>. This message\ncan contain any keys found in the source’s payload, escaped using double curly braces.\nex: <code>\"News Story: {{title}}: {{url}}\"</code></p>\n\n<p>When <code>connect_to_receiver</code> is set to true, the JabberAgent will emit an event for every message it receives.</p>\n\n<p>Have a look at the <a href=\"https://github.com/cantino/huginn/wiki/Formatting-Events-using-Liquid\">Wiki</a> to learn more about liquid templating.</p>\n",
        "creates_events": true,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "TwitterStreamAgent",
        "description": "<p>The Twitter Stream Agent follows the Twitter stream in real time, watching for certain keywords, or filters, that you provide.</p>\n\n<p>To follow the Twitter stream, provide an array of <code>filters</code>.  Multiple words in a filter must all show up in a tweet, but are independent of order.\nIf you provide an array instead of a filter, the first entry will be considered primary and any additional values will be treated as aliases.</p>\n\n<p>To be able to use this Agent you need to authenticate with Twitter in the <a href=\"/services\">Services</a> section first.</p>\n\n<p>Set <code>expected_update_period_in_days</code> to the maximum amount of time that you’d expect to pass between Events being created by this Agent.</p>\n\n<p><code>generate</code> should be either <code>events</code> or <code>counts</code>.  If set to <code>counts</code>, it will output event summaries whenever the Agent is scheduled.</p>\n",
        "creates_events": true,
        "receives_events": false,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": "twitter"
      },
      {
        "name": "LocalFileAgent",
        "description": "<p>The LocalFileAgent can watch a file/directory for changes or emit an event for every file in that directory. When receiving an event it writes the received data into a file.</p>\n\n<p><code>mode</code> determines if the agent is emitting events for (changed) files or writing received event data to disk.</p>\n\n<h3>Reading</h3>\n\n<p>When <code>watch</code> is set to <code>true</code> the LocalFileAgent will watch the specified <code>path</code> for changes, the schedule is ignored and the file system is watched continuously. An event will be emitted for every detected change.</p>\n\n<p>When <code>watch</code> is set to <code>false</code> the agent will emit an event for every file in the directory on each scheduled run.</p>\n\n<p>This agent only emits a ‘file pointer’, not the data inside the files, the following agents can consume the created events: <code>CsvAgent</code>, <code>ReadFileAgent</code>. Read more about the concept in the <a href=\"https://github.com/cantino/huginn/wiki/How-Huginn-works-with-files\">wiki</a>.</p>\n\n<h3>Writing</h3>\n\n<p>Every event will be writting into a file at <code>path</code>, Liquid interpolation is possible to change the path per event.</p>\n\n<p>When <code>append</code> is true the received data will be appended to the file.</p>\n\n<p>Use <a href=\"https://github.com/cantino/huginn/wiki/Formatting-Events-using-Liquid\">Liquid</a> templating in <code>data</code> to specify which part of the received event should be written.</p>\n\n<p><em>Warning</em>: This type of Agent can read and write any file the user that runs the Huginn server has access to, and is <strong>currently disabled</strong>.\nOnly enable this Agent if you trust everyone using your Huginn installation.\nYou can enable this Agent in your .env file by setting <code>ENABLE_INSECURE_AGENTS</code> to <code>true</code>.</p>\n",
        "creates_events": true,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": true,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "SchedulerAgent",
        "description": "<p>The Scheduler Agent periodically takes an action on target Agents according to a user-defined schedule.</p>\n\n<h1>Action types</h1>\n\n<p>Set <code>action</code> to one of the action types below:</p>\n\n<ul>\n  <li>\n    <p><code>run</code>: Target Agents are run at intervals, except for those disabled.</p>\n  </li>\n  <li>\n    <p><code>disable</code>: Target Agents are disabled (if not) at intervals.</p>\n  </li>\n  <li>\n    <p><code>enable</code>: Target Agents are enabled (if not) at intervals.</p>\n  </li>\n</ul>\n\n<h1>Targets</h1>\n\n<p>Select Agents that you want to run periodically by this SchedulerAgent.</p>\n\n<h1>Schedule</h1>\n\n<p>Set <code>schedule</code> to a schedule specification in the <a href=\"http://en.wikipedia.org/wiki/Cron\">cron</a> format.\nFor example:</p>\n\n<ul>\n  <li>\n    <p><code>0 22 * * 1-5</code>: every day of the week at 22:00 (10pm)</p>\n  </li>\n  <li>\n    <p><code>*/10 8-11 * * *</code>: every 10 minutes from 8:00 to and not including 12:00</p>\n  </li>\n</ul>\n\n<p>This variant has several extensions as explained below.</p>\n\n<h2>Timezones</h2>\n\n<p>You can optionally specify a timezone (default: <code>Berlin</code>) after the day-of-week field.</p>\n\n<ul>\n  <li>\n    <p><code>0 22 * * 1-5 Europe/Paris</code>: every day of the week when it’s 22:00 in Paris</p>\n  </li>\n  <li>\n    <p><code>0 22 * * 1-5 Etc/GMT+2</code>: every day of the week when it’s 22:00 in GMT+2</p>\n  </li>\n</ul>\n\n<h2>Seconds</h2>\n\n<p>You can optionally specify seconds before the minute field.</p>\n\n<ul>\n  <li><code>*/30 * * * * *</code>: every 30 seconds</li>\n</ul>\n\n<p>Only multiples of fifteen are allowed as values for the seconds field, i.e. <code>*/15</code>, <code>*/30</code>, <code>15,45</code> etc.</p>\n\n<h2>Last day of month</h2>\n\n<p><code>L</code> signifies “last day of month” in <code>day-of-month</code>.</p>\n\n<ul>\n  <li><code>0 22 L * *</code>: every month on the last day at 22:00</li>\n</ul>\n\n<h2>Weekday names</h2>\n\n<p>You can use three letter names instead of numbers in the <code>weekdays</code> field.</p>\n\n<ul>\n  <li><code>0 22 * * Sat,Sun</code>: every Saturday and Sunday, at 22:00</li>\n</ul>\n\n<h2>Nth weekday of the month</h2>\n\n<p>You can specify “nth weekday of the month” like this.</p>\n\n<ul>\n  <li>\n    <p><code>0 22 * * Sun#1,Sun#2</code>: every first and second Sunday of the month, at 22:00</p>\n  </li>\n  <li>\n    <p><code>0 22 * * Sun#L1</code>: every last Sunday of the month, at 22:00</p>\n  </li>\n</ul>\n",
        "creates_events": false,
        "receives_events": false,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": true,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "JavaScriptAgent",
        "description": "<p>The JavaScript Agent allows you to write code in JavaScript that can create and receive events.  If other Agents aren’t meeting your needs, try this one!</p>\n\n<p>You can put code in the <code>code</code> option, or put your code in a Credential and reference it from <code>code</code> with <code>credential:&lt;name&gt;</code> (recommended).</p>\n\n<p>You can implement <code>Agent.check</code> and <code>Agent.receive</code> as you see fit.  The following methods will be available on Agent in the JavaScript environment:</p>\n\n<ul>\n  <li><code>this.createEvent(payload)</code></li>\n  <li><code>this.incomingEvents()</code> (the returned event objects will each have a <code>payload</code> property)</li>\n  <li><code>this.memory()</code></li>\n  <li><code>this.memory(key)</code></li>\n  <li><code>this.memory(keyToSet, valueToSet)</code></li>\n  <li><code>this.setMemory(object)</code> (replaces the Agent’s memory with the provided object)</li>\n  <li><code>this.deleteKey(key)</code> (deletes a key from memory and returns the value)</li>\n  <li><code>this.credential(name)</code></li>\n  <li><code>this.credential(name, valueToSet)</code></li>\n  <li><code>this.options()</code></li>\n  <li><code>this.options(key)</code></li>\n  <li><code>this.log(message)</code></li>\n  <li><code>this.error(message)</code></li>\n  <li><code>this.escapeHtml(htmlToEscape)</code></li>\n  <li><code>this.unescapeHtml(htmlToUnescape)</code></li>\n</ul>\n",
        "creates_events": true,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": true,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "JiraAgent",
        "description": "<p>The Jira Agent subscribes to Jira issue updates.</p>\n\n<ul>\n  <li><code>jira_url</code> specifies the full URL of the jira installation, including https://</li>\n  <li><code>jql</code> is an optional Jira Query Language-based filter to limit the flow of events. See <a href=\"https://confluence.atlassian.com/display/JIRA/Advanced+Searching\">JQL Docs</a> for details. </li>\n  <li><code>username</code> and <code>password</code> are optional, and may need to be specified if your Jira instance is read-protected</li>\n  <li><code>timeout</code> is an optional parameter that specifies how long the request processing may take in minutes.</li>\n</ul>\n\n<p>The agent does periodic queries and emits the events containing the updated issues in JSON format.</p>\n\n<p>NOTE: upon the first execution, the agent will fetch everything available by the JQL query. So if it’s not desirable, limit the <code>jql</code> query by date.</p>\n",
        "creates_events": true,
        "receives_events": false,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "JsonParseAgent",
        "description": "<p>The JSON Parse Agent parses a JSON string and emits the data in a new event</p>\n\n<p><code>data</code> is the JSON to parse. Use <a href=\"https://github.com/cantino/huginn/wiki/Formatting-Events-using-Liquid\">Liquid</a> templating to specify the JSON string.</p>\n\n<p><code>data_key</code> sets the key which contains the parsed JSON data in emitted events</p>\n",
        "creates_events": true,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "LiquidOutputAgent",
        "description": "<p>The Liquid Output Agent outputs events through a Liquid template you provide.  Use it to create a HTML page, or a json feed, or anything else that can be rendered as a string from your stream of Huginn data. </p>\n\n<p>This Agent will output data at:</p>\n\n<p><code>https://localhost:3000/users/1/web_requests/:id/:secret.any_extension</code></p>\n\n<p>where <code>:secret</code> is the secret specified in your options.  You can use any extension you wish.</p>\n\n<p>Options:</p>\n\n<ul>\n  <li><code>secret</code> - A token that the requestor must provide for light-weight authentication.</li>\n  <li><code>expected_receive_period_in_days</code> - How often you expect data to be received by this Agent from other Agents.</li>\n  <li><code>content</code> - The content to display when someone requests this page.</li>\n  <li><code>mime_type</code> - The mime type to use when someone requests this page.</li>\n  <li><code>mode</code> - The behavior that determines what data is passed to the Liquid template.</li>\n  <li><code>event_limit</code> - A limit applied to the events passed to a template when in “Last X events” mode. Can be a count like “1”, or an amount of time like “1 day” or “5 minutes”.</li>\n</ul>\n\n<h1>Liquid Templating</h1>\n\n<p>The content you provide will be run as a Liquid template. The data from the last event received will be used when processing the Liquid template.</p>\n\n<p>To learn more about Liquid templates, go here: <a href=\"http://liquidmarkup.org\" title=\"Liquid Templating\">http://liquidmarkup.org</a></p>\n\n<h1>Modes</h1>\n\n<h3>Merge events</h3>\n\n<p>The data for incoming events will be merged. So if two events come in like this:</p>\n\n<p><code>\n{ 'a' =&gt; 'b',  'c' =&gt; 'd'}\n{ 'a' =&gt; 'bb', 'e' =&gt; 'f'}\n</code></p>\n\n<p>The final result will be:</p>\n\n<p><code>\n{ 'a' =&gt; 'bb', 'c' =&gt; 'd', 'e' =&gt; 'f'}\n</code></p>\n\n<p>This merged version will be passed to the Liquid template.</p>\n\n<h3>Last event in</h3>\n\n<p>The data from the last event will be passed to the template.</p>\n\n<h3>Last X events</h3>\n\n<p>All of the events received by this agent will be passed to the template\n  as the <code>events</code> array.</p>\n\n<p>The number of events can be controlled via the <code>event_limit</code> option.\n  If <code>event_limit</code> is an integer X, the last X events will be passed\n  to the template.  If <code>event_limit</code> is an integer with a unit of\n  measure like “1 day” or “5 minutes” or “9 years”, a date filter will\n  be applied to the events passed to the template.  If no <code>event_limit</code>\n  is provided, then all of the events for the agent will be passed to\n  the template. </p>\n\n<p>For performance, the maximum <code>event_limit</code> allowed is 1000.</p>\n",
        "creates_events": false,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "ManualEventAgent",
        "description": "<p>The Manual Event Agent is used to manually create Events for testing or other purposes.</p>\n\n<p>Do not set options for this Agent.  Instead, connect it to other Agents and create Events\nusing the UI provided on this Agent’s Summary page.</p>\n",
        "creates_events": true,
        "receives_events": false,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "MqttAgent",
        "description": "<p>The MQTT Agent allows both publication and subscription to an MQTT topic.</p>\n\n<p>MQTT is a generic transport protocol for machine to machine communication.</p>\n\n<p>You can do things like:</p>\n\n<ul>\n  <li>Publish to <a href=\"http://www.rabbitmq.com/mqtt.html\">RabbitMQ</a></li>\n  <li>Run <a href=\"http://owntracks.org/\">OwnTracks, a location tracking tool</a> for iOS and Android</li>\n  <li>Subscribe to your home automation setup like <a href=\"http://forums.ninjablocks.com/index.php?p=/discussion/661/today-i-learned-about-mqtt/p1\">Ninjablocks</a> or <a href=\"http://thethingsystem.com/dev/supported-things.html\">TheThingSystem</a></li>\n</ul>\n\n<p>Simply choose a topic (think email subject line) to publish/listen to, and configure your service.</p>\n\n<p>It’s easy to setup your own <a href=\"http://jpmens.net/2013/09/01/installing-mosquitto-on-a-raspberry-pi/\">broker</a> or connect to a <a href=\"http://www.cloudmqtt.com\">cloud service</a></p>\n\n<p>Hints:\nMany services run mqtts (mqtt over SSL) often with a custom certificate.</p>\n\n<p>You’ll want to download their cert and install it locally, specifying the <code>certificate_path</code> configuration.</p>\n\n<p>Example configuration:</p>\n\n<pre><code>{\n  'uri' =&gt; 'mqtts://user:pass@localhost:8883'\n  'ssl' =&gt; :TLSv1,\n  'ca_file' =&gt; './ca.pem',\n  'cert_file' =&gt; './client.crt',\n  'key_file' =&gt; './client.key',\n  'topic' =&gt; 'huginn'\n}\n</code></pre>\n\n<p>Subscribe to CloCkWeRX’s TheThingSystem instance (thethingsystem.com), where\ntemperature and other events are being published.</p>\n\n<pre><code>{\n  'uri' =&gt; 'mqtt://kcqlmkgx:sVNoccqwvXxE@m10.cloudmqtt.com:13858',\n  'topic' =&gt; 'the_thing_system/demo'\n}\n</code></pre>\n\n<p>Subscribe to all topics</p>\n<pre><code>{\n  'uri' =&gt; 'mqtt://kcqlmkgx:sVNoccqwvXxE@m10.cloudmqtt.com:13858',\n  'topic' =&gt; '/#'\n}\n</code></pre>\n\n<p>Find out more detail on <a href=\"http://www.eclipse.org/paho/files/mqttdoc/Cclient/wildcard.html\">subscription wildcards</a></p>\n",
        "creates_events": true,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "PdfInfoAgent",
        "description": "<p>The PDF Info Agent returns the metadata contained within a given PDF file, using HyPDF.</p>\n\n<p>In order for this agent to work, you need to have <a href=\"https://devcenter.heroku.com/articles/hypdf\">HyPDF</a> running and configured.</p>\n\n<p>It works by acting on events that contain a key <code>url</code> in their payload, and runs the <a href=\"https://devcenter.heroku.com/articles/hypdf#pdfinfo\">pdfinfo</a> command on them.</p>\n",
        "creates_events": true,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "PeakDetectorAgent",
        "description": "<p>The Peak Detector Agent will watch for peaks in an event stream.  When a peak is detected, the resulting Event will have a payload message of <code>message</code>.  You can include extractions in the message, for example: <code>I saw a bar of: {{foo.bar}}</code>, have a look at the <a href=\"https://github.com/cantino/huginn/wiki/Formatting-Events-using-Liquid\">Wiki</a> for details.</p>\n\n<p>The <code>value_path</code> value is a <a href=\"http://goessner.net/articles/JsonPath/\">JSONPath</a> to the value of interest.  <code>group_by_path</code> is a JSONPath that will be used to group values, if present.</p>\n\n<p>Set <code>expected_receive_period_in_days</code> to the maximum amount of time that you’d expect to pass between Events being received by this Agent.</p>\n\n<p>You may set <code>window_duration_in_days</code> to change the default memory window length of <code>14</code> days, <code>min_peak_spacing_in_days</code> to change the default minimum peak spacing of <code>2</code> days (peaks closer together will be ignored), and <code>std_multiple</code> to change the default standard deviation threshold multiple of <code>3</code>.</p>\n",
        "creates_events": true,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "PostAgent",
        "description": "<p>A Post Agent receives events from other agents (or runs periodically), merges those events with the <a href=\"https://github.com/cantino/huginn/wiki/Formatting-Events-using-Liquid\">Liquid-interpolated</a> contents of <code>payload</code>, and sends the results as POST (or GET) requests to a specified url.  To skip merging in the incoming event, but still send the interpolated payload, set <code>no_merge</code> to <code>true</code>.</p>\n\n<p>The <code>post_url</code> field must specify where you would like to send requests. Please include the URI scheme (<code>http</code> or <code>https</code>).</p>\n\n<p>The <code>method</code> used can be any of <code>get</code>, <code>post</code>, <code>put</code>, <code>patch</code>, and <code>delete</code>.</p>\n\n<p>By default, non-GETs will be sent with form encoding (<code>application/x-www-form-urlencoded</code>).</p>\n\n<p>Change <code>content_type</code> to <code>json</code> to send JSON instead.</p>\n\n<p>Change <code>content_type</code> to <code>xml</code> to send XML, where the name of the root element may be specified using <code>xml_root</code>, defaulting to <code>post</code>.</p>\n\n<p>When <code>content_type</code> contains a <a href=\"https://en.wikipedia.org/wiki/Media_type\">MIME</a> type, and <code>payload</code> is a string, its interpolated value will be sent as a string in the HTTP request’s body and the request’s <code>Content-Type</code> HTTP header will be set to <code>content_type</code>. When <code>payload</code> is a string <code>no_merge</code> has to be set to <code>true</code>.</p>\n\n<p>If <code>emit_events</code> is set to <code>true</code>, the server response will be emitted as an Event and can be fed to a WebsiteAgent for parsing (using its <code>data_from_event</code> and <code>type</code> options). No data processing\nwill be attempted by this Agent, so the Event’s “body” value will always be raw text.\nThe Event will also have a “headers” hash and a “status” integer value.\nSet <code>event_headers_style</code> to one of the following values to normalize the keys of “headers” for downstream agents’ convenience:</p>\n\n<ul>\n  <li><code>capitalized</code> (default) - Header names are capitalized; e.g. “Content-Type”</li>\n  <li><code>downcased</code> - Header names are downcased; e.g. “content-type”</li>\n  <li><code>snakecased</code> - Header names are snakecased; e.g. “content_type”</li>\n  <li><code>raw</code> - Backward compatibility option to leave them unmodified from what the underlying HTTP library returns.</li>\n</ul>\n\n<p>Other Options:</p>\n\n<ul>\n  <li><code>headers</code> - When present, it should be a hash of headers to send with the request.</li>\n  <li><code>basic_auth</code> - Specify HTTP basic auth parameters: <code>\"username:password\"</code>, or <code>[\"username\", \"password\"]</code>.</li>\n  <li><code>disable_ssl_verification</code> - Set to <code>true</code> to disable ssl verification.</li>\n  <li><code>user_agent</code> - A custom User-Agent name (default: “Faraday v0.9.1”).</li>\n</ul>\n",
        "creates_events": true,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": true,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "PublicTransportAgent",
        "description": "<p>The Public Transport Request Agent generates Events based on NextBus GPS transit predictions.</p>\n\n<p>Specify the following user settings:</p>\n\n<ul>\n  <li>agency (string)</li>\n  <li>stops (array)</li>\n  <li>alert_window_in_minutes (integer)</li>\n</ul>\n\n<p>First, select an agency by visiting <a href=\"http://www.nextbus.com/predictor/adaAgency.jsp\">http://www.nextbus.com/predictor/adaAgency.jsp</a> and finding your transit system.  Once you find it, copy the part of the URL after <code>?a=</code>.  For example, for the San Francisco MUNI system, you would end up on <a href=\"http://www.nextbus.com/predictor/adaDirection.jsp?a=sf-muni\">http://www.nextbus.com/predictor/adaDirection.jsp?a=<strong>sf-muni</strong></a> and copy “sf-muni”.  Put that into this Agent’s agency setting.</p>\n\n<p>Next, find the stop tags that you care about. </p>\n\n<p>Select your destination and lets use the n-judah route. The link should be <a href=\"http://www.nextbus.com/predictor/adaStop.jsp?a=sf-muni&amp;r=N\">http://www.nextbus.com/predictor/adaStop.jsp?a=sf-muni&amp;r=N</a> Once you find it, copy the part of the URL after <code>r=</code>.</p>\n\n<p>The link may not work, but we’re just trying to get the part after the r=, so even if it gives an error, continue to the next step.</p>\n\n<p>To find the tags for the sf-muni system, for the N route, visit this URL:\n<a href=\"http://webservices.nextbus.com/service/publicXMLFeed?command=routeConfig&amp;a=sf-muni&amp;r=N\">http://webservices.nextbus.com/service/publicXMLFeed?command=routeConfig&amp;a=sf-muni&amp;r=<strong>N</strong></a></p>\n\n<p>The tags are listed as tag=”1234”. Copy that number and add the route before it, separated by a pipe ‘|’ symbol.  Once you have one or more tags from that page, add them to this Agent’s stop list.  E.g,</p>\n\n<pre><code>agency: \"sf-muni\"\nstops: [\"N|5221\", \"N|5215\"]\n</code></pre>\n\n<p>Remember to pick the appropriate stop, which will have different tags for in-bound and out-bound.</p>\n\n<p>This Agent will generate predictions by requesting a URL similar to the following:</p>\n\n<p><a href=\"http://webservices.nextbus.com/service/publicXMLFeed?command=predictionsForMultiStops&amp;a=sf-muni&amp;stops=N&#124;5221&amp;stops=N&#124;5215\">http://webservices.nextbus.com/service/publicXMLFeed?command=predictionsForMultiStops&amp;a=sf-muni&amp;stops=N|5221&amp;stops=N|5215</a></p>\n\n<p>Finally, set the arrival window that you’re interested in.  E.g., 5 minutes.  Events will be created by the agent anytime a new train or bus comes into that time window.</p>\n\n<pre><code>alert_window_in_minutes: 5\n</code></pre>\n",
        "creates_events": true,
        "receives_events": false,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "PushbulletAgent",
        "description": "<p>The Pushbullet agent sends pushes to a pushbullet device</p>\n\n<p>To authenticate you need to either the <code>api_key</code> or create a <code>pushbullet_api_key</code> credential, you can find yours at your account page:</p>\n\n<p><code>https://www.pushbullet.com/account</code></p>\n\n<p>If you do not select an existing device, Huginn will create a new one with the name ‘Huginn’.</p>\n\n<p>To push to all of your devices, select <code>All Devices</code> from the devices list.</p>\n\n<p>You have to provide a message <code>type</code> which has to be <code>note</code>, <code>link</code>, or <code>address</code>. The message types <code>checklist</code>, and <code>file</code> are not supported at the moment.</p>\n\n<p>Depending on the message <code>type</code> you can use additional fields:</p>\n\n<ul>\n  <li>note: <code>title</code> and <code>body</code></li>\n  <li>link: <code>title</code>, <code>body</code>, and <code>url</code></li>\n  <li>address: <code>name</code>, and <code>address</code></li>\n</ul>\n\n<p>In every value of the options hash you can use the liquid templating, learn more about it at the <a href=\"https://github.com/cantino/huginn/wiki/Formatting-Events-using-Liquid\">Wiki</a>.</p>\n",
        "creates_events": false,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "PushoverAgent",
        "description": "<p>The Pushover Agent receives and collects events and sends them via push notification to a user/group.</p>\n\n<p><strong>You need a Pushover API Token:</strong> <a href=\"https://pushover.net/apps/build\">https://pushover.net/apps/build</a></p>\n\n<p><strong>You must provide</strong> a <code>message</code> or <code>text</code> key that will contain the body of the notification. This can come from an event or be set as a default. Pushover API has a <code>512</code> Character Limit including <code>title</code>. <code>message</code> will be truncated.</p>\n\n<ul>\n  <li><code>token</code>: your application’s API token</li>\n  <li><code>user</code>: the user or group key (not e-mail address).</li>\n  <li><code>expected_receive_period_in_days</code>:  is maximum number of days that you would expect to pass between events being received by this agent.</li>\n</ul>\n\n<p>Your event can provide any of the following optional parameters or you can provide defaults:</p>\n\n<ul>\n  <li><code>device</code> - your user’s device name to send the message directly to that device, rather than all of the user’s devices</li>\n  <li><code>title</code> or <code>subject</code> - your notification’s title</li>\n  <li><code>url</code> - a supplementary URL to show with your message - <code>512</code> Character Limit</li>\n  <li><code>url_title</code> - a title for your supplementary URL, otherwise just the URL is shown - <code>100</code> Character Limit</li>\n  <li><code>priority</code> - send as <code>-1</code> to always send as a quiet notification, <code>0</code> is default, <code>1</code> to display as high-priority and bypass the user’s quiet hours, or <code>2</code> for emergency priority: <a href=\"https://pushover.net/api#priority\">Please read Pushover Docs on Emergency Priority</a></li>\n  <li><code>sound</code> - the name of one of the sounds supported by device clients to override the user’s default sound choice. <a href=\"https://pushover.net/api#sounds\">See PushOver docs for sound options.</a></li>\n  <li><code>retry</code> - Required for emergency priority - Specifies how often (in seconds) the Pushover servers will send the same notification to the user. Minimum value: <code>30</code></li>\n  <li><code>expire</code> - Required for emergency priority - Specifies how many seconds your notification will continue to be retried for (every retry seconds). Maximum value: <code>86400</code></li>\n</ul>\n\n<p>Your event can also pass along a timestamp parameter:</p>\n\n<ul>\n  <li><code>timestamp</code> - a <a href=\"https://en.wikipedia.org/wiki/Unix_time\">Unix timestamp</a> of your message’s date and time to display to the user, rather than the time your message is received by the Pushover API.</li>\n</ul>\n",
        "creates_events": false,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "ReadFileAgent",
        "description": "<p>The ReadFileAgent takes events from <code>FileHandling</code> agents, reads the file, and emits the contents as a string.</p>\n\n<p><code>data_key</code> specifies the key of the emitted event which contains the file contents.</p>\n\n<p>This agent can consume a ‘file pointer’ event from the following agents with no additional configuration: <code>FtpsiteAgent</code>, <code>LocalFileAgent</code>, <code>S3Agent</code>. Read more about the concept in the <a href=\"https://github.com/cantino/huginn/wiki/How-Huginn-works-with-files\">wiki</a>.</p>\n",
        "creates_events": true,
        "receives_events": true,
        "consumes_file_pointer": true,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "RssAgent",
        "description": "<p>The RSS Agent consumes RSS feeds and emits events when they change.</p>\n\n<p>This Agent is fairly simple, using <a href=\"https://github.com/aasmith/feed-normalizer\">feed-normalizer</a> as a base.  For complex feeds\nwith additional field types, we recommend using a WebsiteAgent.  See <a href=\"https://github.com/cantino/huginn/wiki/Agent-configuration-examples#itunes-trailers\">this example</a>.</p>\n\n<p>If you want to <em>output</em> an RSS feed, use the DataOutputAgent.</p>\n\n<p>Options:</p>\n\n<ul>\n  <li><code>url</code> - The URL of the RSS feed (an array of URLs can also be used; items with identical guids across feeds will be considered duplicates).</li>\n  <li><code>clean</code> - Attempt to use <a href=\"https://github.com/aasmith/feed-normalizer\">feed-normalizer</a>’s’ <code>clean!</code> method to cleanup HTML in the feed.  Set to <code>true</code> to use.</li>\n  <li><code>expected_update_period_in_days</code> - How often you expect this RSS feed to change.  If more than this amount of time passes without an update, the Agent will mark itself as not working.</li>\n  <li><code>headers</code> - When present, it should be a hash of headers to send with the request.</li>\n  <li><code>basic_auth</code> - Specify HTTP basic auth parameters: <code>\"username:password\"</code>, or <code>[\"username\", \"password\"]</code>.</li>\n  <li><code>disable_ssl_verification</code> - Set to <code>true</code> to disable ssl verification.</li>\n  <li><code>disable_url_encoding</code> - Set to <code>true</code> to disable url encoding.</li>\n  <li><code>force_encoding</code> - Set <code>force_encoding</code> to an encoding name if the website is known to respond with a missing, invalid or wrong charset in the Content-Type header.  Note that a text content without a charset is taken as encoded in UTF-8 (not ISO-8859-1).</li>\n  <li><code>user_agent</code> - A custom User-Agent name (default: “Faraday v0.9.1”).</li>\n  <li><code>max_events_per_run</code> - Limit number of events created (items parsed) per run for feed.</li>\n</ul>\n\n<h1>Ordering Events</h1>\n\n<p>To specify the order of events created in each run, set <code>events_order</code> to an array of sort keys, each of which looks like either <code>expression</code> or <code>[expression, type, descending]</code>, as described as follows:</p>\n\n<ul>\n  <li>\n    <p><em>expression</em> is a Liquid template to generate a string to be used as sort key.</p>\n  </li>\n  <li>\n    <p><em>type</em> (optional) is one of <code>string</code> (default), <code>number</code> and <code>time</code>, which specifies how to evaluate <em>expression</em> for comparison.</p>\n  </li>\n  <li>\n    <p><em>descending</em> (optional) is a boolean value to determine if comparison should be done in descending (reverse) order, which defaults to <code>false</code>.</p>\n  </li>\n</ul>\n\n<p>Sort keys listed earlier take precedence over ones listed later.  For example, if you want to sort articles by the date and then by the author, specify <code>[[\"{{date}}\", \"time\"], \"{{author}}\"]</code>.</p>\n\n<p>Sorting is done stably, so even if all events have the same set of sort key values the original order is retained.  Also, a special Liquid variable <code>_index_</code> is provided, which contains the zero-based index number of each event, which means you can exactly reverse the order of events by specifying <code>[[\"{{_index_}}\", \"number\", true]]</code>.</p>\n\n<p>In this Agent, the default value for <code>events_order</code> is <code>[[\"{{date_published}}\",\"time\"],[\"{{last_updated}}\",\"time\"]]</code>.</p>\n",
        "creates_events": true,
        "receives_events": false,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": true,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "S3Agent",
        "description": "<p>The S3Agent can watch a bucket for changes or emit an event for every file in that bucket. When receiving events, it writes the data into a file on S3.</p>\n\n<p><code>mode</code> must be present and either <code>read</code> or <code>write</code>, in <code>read</code> mode the agent checks the S3 bucket for changed files, with <code>write</code> it writes received events to a file in the bucket.</p>\n\n<h3>Universal options</h3>\n\n<p>To use credentials for the <code>access_key</code> and <code>access_key_secret</code> use the liquid <code>credential</code> tag like so <code>{% credential name-of-credential %}</code></p>\n\n<p>Select the <code>region</code> in which the bucket was created.</p>\n\n<h3>Reading</h3>\n\n<p>When <code>watch</code> is set to <code>true</code> the S3Agent will watch the specified <code>bucket</code> for changes. An event will be emitted for every detected change.</p>\n\n<p>When <code>watch</code> is set to <code>false</code> the agent will emit an event for every file in the bucket on each sheduled run.</p>\n\n<p>This agent only emits a ‘file pointer’, not the data inside the files, the following agents can consume the created events: <code>CsvAgent</code>, <code>ReadFileAgent</code>. Read more about the concept in the <a href=\"https://github.com/cantino/huginn/wiki/How-Huginn-works-with-files\">wiki</a>.</p>\n\n<h3>Writing</h3>\n\n<p>Specify the filename to use in <code>filename</code>, Liquid interpolation is possible to change the name per event.</p>\n\n<p>Use <a href=\"https://github.com/cantino/huginn/wiki/Formatting-Events-using-Liquid\">Liquid</a> templating in <code>data</code> to specify which part of the received event should be written.</p>\n",
        "creates_events": true,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": true,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "SentimentAgent",
        "description": "<p>The Sentiment Agent generates <code>good-bad</code> (psychological valence or happiness index), <code>active-passive</code> (arousal), and  <code>strong-weak</code> (dominance) score. It will output a value between 1 and 9. It will only work on English content.</p>\n\n<p>Make sure the content this agent is analyzing is of sufficient length to get respectable results.</p>\n\n<p>Provide a JSONPath in <code>content</code> field where content is residing and set <code>expected_receive_period_in_days</code> to the maximum number of days you would allow to be passed between events being received by this agent.</p>\n",
        "creates_events": true,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "ShellCommandAgent",
        "description": "<p>The Shell Command Agent will execute commands on your local system, returning the output.</p>\n\n<p><code>command</code> specifies the command (either a shell command line string or an array of command line arguments) to be executed, and <code>path</code> will tell ShellCommandAgent in what directory to run this command.  The content of <code>stdin</code> will be fed to the command via the standard input.</p>\n\n<p><code>expected_update_period_in_days</code> is used to determine if the Agent is working.</p>\n\n<p>ShellCommandAgent can also act upon received events. When receiving an event, this Agent’s options can interpolate values from the incoming event.\nFor example, your command could be defined as <code>{{cmd}}</code>, in which case the event’s <code>cmd</code> property would be used.</p>\n\n<p>The resulting event will contain the <code>command</code> which was executed, the <code>path</code> it was executed under, the <code>exit_status</code> of the command, the <code>errors</code>, and the actual <code>output</code>. ShellCommandAgent will not log an error if the result implies that something went wrong.</p>\n\n<p>If <code>suppress_on_failure</code> is set to true, no event is emitted when <code>exit_status</code> is not zero.</p>\n\n<p>If <code>suppress_on_empty_output</code> is set to true, no event is emitted when <code>output</code> is empty.</p>\n\n<p><em>Warning</em>: This type of Agent runs arbitrary commands on your system, and is <strong>currently disabled</strong>.\nOnly enable this Agent if you trust everyone using your Huginn installation.\nYou can enable this Agent in your .env file by setting <code>ENABLE_INSECURE_AGENTS</code> to <code>true</code>.</p>\n",
        "creates_events": true,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": true,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "SlackAgent",
        "description": "<p>The Slack Agent lets you receive events and send notifications to <a href=\"https://slack.com/\">Slack</a>.</p>\n\n<p>To get started, you will first need to configure an incoming webhook.</p>\n\n<ul>\n  <li>Go to <code>https://my.slack.com/services/new/incoming-webhook</code>, choose a default channel and add the integration.</li>\n</ul>\n\n<p>Your webhook URL will look like: <code>https://hooks.slack.com/services/some/random/characters</code></p>\n\n<p>Once the webhook has been configured, it can be used to post to other channels or direct to team members. To send a private message to team member, use their @username as the channel. Messages can be formatted using <a href=\"https://github.com/cantino/huginn/wiki/Formatting-Events-using-Liquid\">Liquid</a>.</p>\n\n<p>Finally, you can set a custom icon for this webhook in <code>icon</code>, either as <a href=\"http://www.emoji-cheat-sheet.com\">emoji</a> or an URL to an image. Leaving this field blank will use the default icon for a webhook.</p>\n",
        "creates_events": false,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "StubhubAgent",
        "description": "<p>The StubHub Agent creates an event for a given StubHub Event.</p>\n\n<p>It can be used to track how many tickets are available for the event and the minimum and maximum price. All that is required is that you paste in the url from the actual event, e.g. http://www.stubhub.com/outside-lands-music-festival-tickets/outside-lands-music-festival-3-day-pass-san-francisco-golden-gate-park-polo-fields-8-8-2014-9020701/</p>\n",
        "creates_events": true,
        "receives_events": false,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "TelegramAgent",
        "description": "<p>The Telegram Agent receives and collects events and sends them via <a href=\"https://telegram.org/\">Telegram</a>.</p>\n\n<p>It is assumed that events have either a <code>text</code>, <code>photo</code>, <code>audio</code>, <code>document</code> or <code>video</code> key. You can use the EventFormattingAgent if your event does not provide these keys.</p>\n\n<p>The value of <code>text</code> key is sent as a plain text message. You can also tell Telegram how to parse the message with <code>parse_mode</code>, set to either <code>html</code> or <code>markdown</code>.\nThe value of <code>photo</code>, <code>audio</code>, <code>document</code> and <code>video</code> keys should be a url whose contents will be sent to you.</p>\n\n<p><strong>Setup</strong></p>\n\n<ol>\n  <li>Obtain an <code>auth_token</code> by <a href=\"https://telegram.me/botfather\">creating a new bot</a>.\n2a. If you would like to send messages to a public channel:</li>\n  <li>Add your bot to the channel as an administrator</li>\n  <li>Set <code>chat_id</code> to the name of your channel - e.g. <code>@YourHugginChannel</code>\n2b. If you would like to send messages to a group:</li>\n  <li>Add the bot to the group</li>\n  <li>Obtain your group <code>chat_id</code> from the recently started conversation by visiting https://api.telegram.org/bot<code>&lt;auth_token&gt;</code>/getUpdates\n2c. If you would like to send messages privately to yourself:</li>\n  <li>Send a private message to your bot by visiting https://telegram.me/YourHuginnBot</li>\n  <li>Obtain your private <code>chat_id</code> from the recently started conversation by visiting https://api.telegram.org/bot<code>&lt;auth_token&gt;</code>/getUpdates</li>\n</ol>\n",
        "creates_events": false,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "TranslationAgent",
        "description": "<p>The Translation Agent will attempt to translate text between natural languages.</p>\n\n<p>Services are provided using Microsoft Translator. You can <a href=\"https://datamarket.azure.com/dataset/bing/microsofttranslator\">sign up</a> and <a href=\"https://datamarket.azure.com/developer/applications/register\">register your application</a> to get <code>client_id</code> and <code>client_secret</code> which are required to use this agent.</p>\n\n<p><code>to</code> must be filled with a <a href=\"http://msdn.microsoft.com/en-us/library/hh456380.aspx\">translator language code</a>.</p>\n\n<p>Specify what you would like to translate in <code>content</code> field, you can use <a href=\"https://github.com/cantino/huginn/wiki/Formatting-Events-using-Liquid\">Liquid</a> specify which part of the payload you want to translate.</p>\n\n<p><code>expected_receive_period_in_days</code> is the maximum number of days you would allow to pass between events.</p>\n",
        "creates_events": true,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "TriggerAgent",
        "description": "<p>The Trigger Agent will watch for a specific value in an Event payload.</p>\n\n<p>The <code>rules</code> array contains hashes of <code>path</code>, <code>value</code>, and <code>type</code>.  The <code>path</code> value is a dotted path through a hash in <a href=\"http://goessner.net/articles/JsonPath/\">JSONPaths</a> syntax.</p>\n\n<p>The <code>type</code> can be one of <code>regex</code>, <code>!regex</code>, <code>field&lt;value</code>, <code>field&lt;=value</code>, <code>field==value</code>, <code>field!=value</code>, <code>field&gt;=value</code>, <code>field&gt;value</code>, and <code>not in</code> and compares with the <code>value</code>.  Note that regex patterns are matched case insensitively.  If you want case sensitive matching, prefix your pattern with <code>(?-i)</code>.</p>\n\n<p>The <code>value</code> can be a single value or an array of values. In the case of an array, all items must be strings, and if one or more values match, then the rule matches. Note: avoid using <code>field!=value</code> with arrays, you should use <code>not in</code> instead.</p>\n\n<p>By default, all rules must match for the Agent to trigger. You can switch this so that only one rule must match by\nsetting <code>must_match</code> to <code>1</code>.</p>\n\n<p>The resulting Event will have a payload message of <code>message</code>.  You can use liquid templating in the `message, have a look at the <a href=\"https://github.com/cantino/huginn/wiki/Formatting-Events-using-Liquid\">Wiki</a> for details.</p>\n\n<p>Set <code>keep_event</code> to <code>true</code> if you’d like to re-emit the incoming event, optionally merged with ‘message’ when provided.</p>\n\n<p>Set <code>expected_receive_period_in_days</code> to the maximum amount of time that you’d expect to pass between Events being received by this Agent.</p>\n",
        "creates_events": true,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": true,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "TumblrPublishAgent",
        "description": "<p>The Tumblr Publish Agent publishes Tumblr posts from the events it receives.</p>\n\n<p>To be able to use this Agent you need to authenticate with Tumblr in the <a href=\"/services\">Services</a> section first.</p>\n\n<p><strong>Required fields:</strong></p>\n\n<p><code>blog_name</code> Your Tumblr URL (e.g. “mustardhamsters.tumblr.com”)</p>\n\n<p><code>post_type</code> One of [text, photo, quote, link, chat, audio, video, reblog]</p>\n\n<hr />\n\n<p>You may leave any of the following optional fields blank. Including a field not allowed for the specified <code>post_type</code> will cause a failure.</p>\n\n<p><strong>Any post type</strong></p>\n\n<ul>\n  <li><code>state</code> published, draft, queue, private</li>\n  <li><code>tags</code> Comma-separated tags for this post</li>\n  <li><code>tweet</code> off, text for tweet</li>\n  <li><code>date</code> GMT date and time of the post as a string</li>\n  <li><code>format</code> html, markdown</li>\n  <li><code>slug</code> short text summary at end of the post URL</li>\n</ul>\n\n<p><strong>Text</strong> <code>title</code> <code>body</code></p>\n\n<p><strong>Photo</strong> <code>caption</code> <code>link</code>  <code>source</code></p>\n\n<p><strong>Quote</strong> <code>quote</code> <code>source</code></p>\n\n<p><strong>Link</strong> <code>title</code> <code>url</code> <code>description</code></p>\n\n<p><strong>Chat</strong> <code>title</code> <code>conversation</code></p>\n\n<p><strong>Audio</strong> <code>caption</code> <code>external_url</code></p>\n\n<p><strong>Video</strong> <code>caption</code> <code>embed</code></p>\n\n<p><strong>Reblog</strong> <code>id</code> <code>reblog_key</code> <code>comment</code></p>\n\n<hr />\n\n<p><a href=\"https://www.tumblr.com/docs/en/api/v2#posting\">Full information on field options</a></p>\n\n<p>Set <code>expected_update_period_in_days</code> to the maximum amount of time that you’d expect to pass between Events being created by this Agent.</p>\n",
        "creates_events": true,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": "tumblr"
      },
      {
        "name": "TwilioAgent",
        "description": "<p>The Twilio Agent receives and collects events and sends them via text message (up to 160 characters) or gives you a call when scheduled.</p>\n\n<p>It is assumed that events have a <code>message</code>, <code>text</code>, or <code>sms</code> key, the value of which is sent as the content of the text message/call. You can use the EventFormattingAgent if your event does not provide these keys.</p>\n\n<p>Set <code>receiver_cell</code> to the number to receive text messages/call and <code>sender_cell</code> to the number sending them.</p>\n\n<p><code>expected_receive_period_in_days</code> is maximum number of days that you would expect to pass between events being received by this agent.</p>\n\n<p>If you would like to receive calls, set <code>receive_call</code> to <code>true</code>. In this case, <code>server_url</code> must be set to the URL of your\nHuginn installation (probably “https://localhost:3000”), which must be web-accessible.  Be sure to set http/https correctly.</p>\n",
        "creates_events": false,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "TwilioReceiveTextAgent",
        "description": "<p>The Twilio Receive Text Agent receives text messages from Twilio and emits them as events.</p>\n\n<p>In order to create events with this agent, configure Twilio to send POST requests to:</p>\n\n<p><code>\nhttps://localhost:3000/users/1/web_requests/:id/sms-endpoint\n</code></p>\n\n<p>The placeholder symbols above will be replaced by their values once the agent is saved.</p>\n\n<p>Options:</p>\n\n<ul>\n  <li>\n    <p><code>server_url</code> must be set to the URL of your\n  Huginn installation (probably “https://localhost:3000”), which must be web-accessible.  Be sure to set http/https correctly.</p>\n  </li>\n  <li>\n    <p><code>account_sid</code> and <code>auth_token</code> are your Twilio account credentials. <code>auth_token</code> must be the primary auth token for your Twilio accout.</p>\n  </li>\n  <li>\n    <p>If <code>reply_text</code> is set, it’s contents will be sent back as a confirmation text.</p>\n  </li>\n  <li>\n    <p><code>expected_receive_period_in_days</code> - How often you expect to receive events this way. Used to determine if the agent is working.</p>\n  </li>\n</ul>\n",
        "creates_events": true,
        "receives_events": false,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "TwitterActionAgent",
        "description": "<p>The Twitter Action Agent is able to retweet or favorite tweets from the events it receives.</p>\n\n<p>It expects to consume events generated by twitter agents where the payload is a hash of tweet information. The existing TwitterStreamAgent is one example of a valid event producer for this Agent.</p>\n\n<p>To be able to use this Agent you need to authenticate with Twitter in the <a href=\"/services\">Services</a> section first.</p>\n\n<p>Set <code>expected_receive_period_in_days</code> to the maximum amount of time that you’d expect to pass between Events being received by this Agent.\nSet <code>retweet</code> to either true or false.\nSet <code>favorite</code> to either true or false.\nSet <code>emit_error_events</code> to true to emit an Event when the action failed, otherwise the action will be retried.</p>\n",
        "creates_events": true,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": "twitter"
      },
      {
        "name": "TwitterFavorites",
        "description": "<p>The Twitter Favorites List Agent follows the favorites list of a specified Twitter user.</p>\n\n<p>To be able to use this Agent you need to authenticate with Twitter in the <a href=\"/services\">Services</a> section first.</p>\n\n<p>You must also provide the <code>username</code> of the Twitter user, <code>number</code> of latest tweets to monitor and `history’ as number of tweets that will be held in memory.</p>\n\n<p>Set <code>expected_update_period_in_days</code> to the maximum amount of time that you’d expect to pass between Events being created by this Agent.</p>\n\n<p>Set <code>starting_at</code> to the date/time (eg. <code>Mon Jun 02 00:38:12 +0000 2014</code>) you want to start receiving tweets from (default: agent’s <code>created_at</code>)</p>\n",
        "creates_events": true,
        "receives_events": false,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": "twitter"
      },
      {
        "name": "TwitterPublishAgent",
        "description": "<p>The Twitter Publish Agent publishes tweets from the events it receives.</p>\n\n<p>To be able to use this Agent you need to authenticate with Twitter in the <a href=\"/services\">Services</a> section first.</p>\n\n<p>You must also specify a <code>message</code> parameter, you can use <a href=\"https://github.com/cantino/huginn/wiki/Formatting-Events-using-Liquid\">Liquid</a> to format the message.</p>\n\n<p>Set <code>expected_update_period_in_days</code> to the maximum amount of time that you’d expect to pass between Events being created by this Agent.</p>\n",
        "creates_events": true,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": "twitter"
      },
      {
        "name": "TwitterSearchAgent",
        "description": "<p>The Twitter Search Agent performs and emits the results of a specified Twitter search.</p>\n\n<p>If you want realtime data from Twitter about frequent terms, you should definitely use the Twitter Stream Agent instead.</p>\n\n<p>To be able to use this Agent you need to authenticate with Twitter in the <a href=\"/services\">Services</a> section first.</p>\n\n<p>You must provide the desired <code>search</code>.</p>\n\n<p>Set <code>result_type</code> to specify which <a href=\"https://dev.twitter.com/rest/reference/get/search/tweets\">type of search results</a> you would prefer to receive. Options are “mixed”, “recent”, and “popular”. (default: <code>mixed</code>)</p>\n\n<p>Set <code>max_results</code> to limit the amount of results to retrieve per run(default: <code>500</code>. The API rate limit is ~18,000 per 15 minutes. <a href=\"https://dev.twitter.com/rest/public/rate-limiting\">Click here to learn more about rate limits</a>.</p>\n\n<p>Set <code>expected_update_period_in_days</code> to the maximum amount of time that you’d expect to pass between Events being created by this Agent.</p>\n\n<p>Set <code>starting_at</code> to the date/time (eg. <code>Mon Jun 02 00:38:12 +0000 2014</code>) you want to start receiving tweets from (default: agent’s <code>created_at</code>)</p>\n",
        "creates_events": true,
        "receives_events": false,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": "twitter"
      },
      {
        "name": "TwitterUserAgent",
        "description": "<p>The Twitter User Agent either follows the timeline of a specific Twitter user or follows your own home timeline including both your tweets and tweets from people whom you are following.</p>\n\n<p>To be able to use this Agent you need to authenticate with Twitter in the <a href=\"/services\">Services</a> section first.</p>\n\n<p>To follow a Twitter user set <code>choose_home_time_line</code> to <code>false</code> and provide the <code>username</code>.</p>\n\n<p>To follow your own home timeline set <code>choose_home_time_line</code> to <code>true</code>.</p>\n\n<p>Set <code>include_retweets</code> to <code>false</code> to not include retweets (default: <code>true</code>)</p>\n\n<p>Set <code>exclude_replies</code> to <code>true</code> to exclude replies (default: <code>false</code>)</p>\n\n<p>Set <code>expected_update_period_in_days</code> to the maximum amount of time that you’d expect to pass between Events being created by this Agent.</p>\n\n<p>Set <code>starting_at</code> to the date/time (eg. <code>Mon Jun 02 00:38:12 +0000 2014</code>) you want to start receiving tweets from (default: agent’s <code>created_at</code>)</p>\n",
        "creates_events": true,
        "receives_events": false,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": "twitter"
      },
      {
        "name": "UserLocationAgent",
        "description": "<p>The User Location Agent creates events based on WebHook POSTS that contain a <code>latitude</code> and <code>longitude</code>.  You can use the <a href=\"https://github.com/cantino/post_location\">POSTLocation</a> or <a href=\"https://github.com/chriseidhof/PostGPS\">PostGPS</a> iOS app to post your location to <code>https://localhost:3000/users/1/update_location/:secret</code> where <code>:secret</code> is specified in your options.</p>\n\n<p>If you want to only keep more precise locations, set <code>max_accuracy</code> to the upper bound, in meters. The default name for this field is <code>accuracy</code>, but you can change this by setting a value for <code>accuracy_field</code>.</p>\n\n<p>If you want to require a certain distance traveled, set <code>min_distance</code> to the minimum distance, in meters. Note that GPS readings and the measurement itself aren’t exact, so don’t rely on this for precision filtering.</p>\n\n<p>To view the locations on a map, set <code>api_key</code> to your <a href=\"https://developers.google.com/maps/documentation/javascript/get-api-key#key\">Google Maps JavaScript API key</a>.</p>\n",
        "creates_events": true,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "WeatherAgent",
        "description": "<p>The Weather Agent creates an event for the day’s weather at a given <code>location</code>.</p>\n\n<p>You also must select <code>which_day</code> you would like to get the weather for where the number 0 is for today and 1 is for tomorrow and so on. Weather is only returned for 1 week at a time.</p>\n\n<p>The weather can be provided by either Wunderground or ForecastIO. To choose which <code>service</code> to use, enter either <code>forecastio</code> or <code>wunderground</code>.</p>\n\n<p>The <code>location</code> can be a US zipcode, or any location that Wunderground supports. To find one, search <a href=\"http://wunderground.com\">wunderground.com</a> and copy the location part of the URL.  For example, a result for San Francisco gives <code>http://www.wunderground.com/US/CA/San_Francisco.html</code> and London, England gives <code>http://www.wunderground.com/q/zmw:00000.1.03772</code>.  The locations in each are <code>US/CA/San_Francisco</code> and <code>zmw:00000.1.03772</code>, respectively.</p>\n\n<p>If you plan on using ForecastIO, the <code>location</code> must be a comma-separated string of co-ordinates (longitude, latitude). For example, San Francisco would be <code>37.7771,-122.4196</code>.</p>\n\n<p>You must setup an <a href=\"http://www.wunderground.com/weather/api/\">API key for Wunderground</a> in order to use this Agent with Wunderground.</p>\n\n<p>You must setup an <a href=\"https://developer.forecast.io/\">API key for Forecast</a> in order to use this Agent with ForecastIO.</p>\n\n<p>Set <code>expected_update_period_in_days</code> to the maximum amount of time that you’d expect to pass between Events being created by this Agent.</p>\n\n<p>If you want to see the returned texts in your language, then set the <code>language</code> parameter in ISO 639-1 format.</p>\n",
        "creates_events": true,
        "receives_events": false,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "WebhookAgent",
        "description": "<p>The Webhook Agent will create events by receiving webhooks from any source. In order to create events with this agent, make a POST request to:</p>\n\n<p><code>\n   https://localhost:3000/users/1/web_requests/:id/:secret\n</code></p>\n\n<p>The placeholder symbols above will be replaced by their values once the agent is saved.</p>\n\n<p>Options:</p>\n\n<ul>\n  <li><code>secret</code> - A token that the host will provide for authentication.</li>\n  <li><code>expected_receive_period_in_days</code> - How often you expect to receive\nevents this way. Used to determine if the agent is working.</li>\n  <li><code>payload_path</code> - JSONPath of the attribute in the POST body to be\nused as the Event payload.  Set to <code>.</code> to return the entire message.\nIf <code>payload_path</code> points to an array, Events will be created for each element.</li>\n  <li><code>verbs</code> - Comma-separated list of http verbs your agent will accept.\nFor example, “post,get” will enable POST and GET requests. Defaults\nto “post”.</li>\n  <li><code>response</code> - The response message to the request. Defaults to ‘Event Created’.</li>\n  <li><code>code</code> - The response code to the request. Defaults to ‘201’.</li>\n  <li><code>recaptcha_secret</code> - Setting this to a reCAPTCHA “secret” key makes your agent verify incoming requests with reCAPTCHA.  Don’t forget to embed a reCAPTCHA snippet including your “site” key in the originating form(s).</li>\n  <li><code>recaptcha_send_remote_addr</code> - Set this to true if your server is properly configured to set REMOTE_ADDR to the IP address of each visitor (instead of that of a proxy server).</li>\n</ul>\n",
        "creates_events": true,
        "receives_events": false,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "WebsiteAgent",
        "description": "<p>The Website Agent scrapes a website, XML document, or JSON feed and creates Events based on the results.</p>\n\n<p>Specify a <code>url</code> and select a <code>mode</code> for when to create Events based on the scraped data, either <code>all</code>, <code>on_change</code>, or <code>merge</code> (if fetching based on an Event, see below).</p>\n\n<p>The <code>url</code> option can be a single url, or an array of urls (for example, for multiple pages with the exact same structure but different content to scrape).</p>\n\n<p>The WebsiteAgent can also scrape based on incoming events.</p>\n\n<ul>\n  <li>Set the <code>url_from_event</code> option to a Liquid template to generate the url to access based on the Event.  (To fetch the url in the Event’s <code>url</code> key, for example, set <code>url_from_event</code> to <code>{{ url }}</code>.)</li>\n  <li>Alternatively, set <code>data_from_event</code> to a Liquid template to use data directly without fetching any URL.  (For example, set it to <code>{{ html }}</code> to use HTML contained in the <code>html</code> key of the incoming Event.)</li>\n  <li>If you specify <code>merge</code> for the <code>mode</code> option, Huginn will retain the old payload and update it with new values.</li>\n</ul>\n\n<h1>Supported Document Types</h1>\n\n<p>The <code>type</code> value can be <code>xml</code>, <code>html</code>, <code>json</code>, or <code>text</code>.</p>\n\n<p>To tell the Agent how to parse the content, specify <code>extract</code> as a hash with keys naming the extractions and values of hashes.</p>\n\n<p>Note that for all of the formats, whatever you extract MUST have the same number of matches for each extractor.  E.g., if you’re extracting rows, all extractors must match all rows.  For generating CSS selectors, something like <a href=\"http://selectorgadget.com\">SelectorGadget</a> may be helpful.</p>\n\n<h1>Scraping HTML and XML</h1>\n\n<p>When parsing HTML or XML, these sub-hashes specify how each extraction should be done.  The Agent first selects a node set from the document for each extraction key by evaluating either a CSS selector in <code>css</code> or an XPath expression in <code>xpath</code>.  It then evaluates an XPath expression in <code>value</code> (default: <code>.</code>) on each node in the node set, converting the result into a string.  Here’s an example:</p>\n\n<pre><code>\"extract\": {\n  \"url\": { \"css\": \"#comic img\", \"value\": \"@src\" },\n  \"title\": { \"css\": \"#comic img\", \"value\": \"@title\" },\n  \"body_text\": { \"css\": \"div.main\", \"value\": \".//text()\" }\n}\n</code></pre>\n\n<p>“@<em>attr</em>” is the XPath expression to extract the value of an attribute named <em>attr</em> from a node, and <code>.//text()</code> extracts all the enclosed text. To extract the innerHTML, use <code>./node()</code>; and to extract the outer HTML, use  <code>.</code>.</p>\n\n<p>You can also use <a href=\"http://www.w3.org/TR/xpath/#section-String-Functions\">XPath functions</a> like <code>normalize-space</code> to strip and squeeze whitespace, <code>substring-after</code> to extract part of a text, and <code>translate</code> to remove commas from formatted numbers, etc.  Note that these functions take a string, not a node set, so what you may think would be written as <code>normalize-space(.//text())</code> should actually be <code>normalize-space(.)</code>.</p>\n\n<p>Beware that when parsing an XML document (i.e. <code>type</code> is <code>xml</code>) using <code>xpath</code> expressions, all namespaces are stripped from the document unless the top-level option <code>use_namespaces</code> is set to <code>true</code>.</p>\n\n<h1>Scraping JSON</h1>\n\n<p>When parsing JSON, these sub-hashes specify <a href=\"http://goessner.net/articles/JsonPath/\">JSONPaths</a> to the values that you care about.  For example:</p>\n\n<pre><code>\"extract\": {\n  \"title\": { \"path\": \"results.data[*].title\" },\n  \"description\": { \"path\": \"results.data[*].description\" }\n}\n</code></pre>\n\n<p>The <code>extract</code> option can be skipped for the JSON type, causing the full JSON response to be returned.</p>\n\n<h1>Scraping Text</h1>\n\n<p>When parsing text, each sub-hash should contain a <code>regexp</code> and <code>index</code>.  Output text is matched against the regular expression repeatedly from the beginning through to the end, collecting a captured group specified by <code>index</code> in each match.  Each index should be either an integer or a string name which corresponds to <code>(?&lt;<em>name</em>&gt;...)</code>.  For example, to parse lines of <code><em>word</em>: <em>definition</em></code>, the following should work:</p>\n\n<pre><code>\"extract\": {\n  \"word\": { \"regexp\": \"^(.+?): (.+)$\", index: 1 },\n  \"definition\": { \"regexp\": \"^(.+?): (.+)$\", index: 2 }\n}\n</code></pre>\n\n<p>Or if you prefer names to numbers for index:</p>\n\n<pre><code>\"extract\": {\n  \"word\": { \"regexp\": \"^(?&lt;word&gt;.+?): (?&lt;definition&gt;.+)$\", index: 'word' },\n  \"definition\": { \"regexp\": \"^(?&lt;word&gt;.+?): (?&lt;definition&gt;.+)$\", index: 'definition' }\n}\n</code></pre>\n\n<p>To extract the whole content as one event:</p>\n\n<pre><code>\"extract\": {\n  \"content\": { \"regexp\": \"A(?m:.)*z\", index: 0 }\n}\n</code></pre>\n\n<p>Beware that <code>.</code> does not match the newline character (LF) unless the <code>m</code> flag is in effect, and <code>^</code>/<code>$</code> basically match every line beginning/end.  See <a href=\"http://ruby-doc.org/core-2.3.1/doc/regexp_rdoc.html\">this document</a> to learn the regular expression variant used in this service.</p>\n\n<h1>General Options</h1>\n\n<p>Can be configured to use HTTP basic auth by including the <code>basic_auth</code> parameter with <code>\"username:password\"</code>, or <code>[\"username\", \"password\"]</code>.</p>\n\n<p>Set <code>expected_update_period_in_days</code> to the maximum amount of time that you’d expect to pass between Events being created by this Agent.  This is only used to set the “working” status.</p>\n\n<p>Set <code>uniqueness_look_back</code> to limit the number of events checked for uniqueness (typically for performance).  This defaults to the larger of 200 or 3x the number of detected received results.</p>\n\n<p>Set <code>force_encoding</code> to an encoding name if the website is known to respond with a missing, invalid, or wrong charset in the Content-Type header.  Note that a text content without a charset is taken as encoded in UTF-8 (not ISO-8859-1).</p>\n\n<p>Set <code>user_agent</code> to a custom User-Agent name if the website does not like the default value (<code>Huginn - https://github.com/cantino/huginn</code>).</p>\n\n<p>The <code>headers</code> field is optional.  When present, it should be a hash of headers to send with the request.</p>\n\n<p>Set <code>disable_ssl_verification</code> to <code>true</code> to disable ssl verification.</p>\n\n<p>Set <code>unzip</code> to <code>gzip</code> to inflate the resource using gzip.</p>\n\n<p>Set <code>http_success_codes</code> to an array of status codes (e.g., <code>[404, 422]</code>) to treat HTTP response codes beyond 200 as successes.</p>\n\n<h1>Liquid Templating</h1>\n\n<p>In Liquid templating, the following variable is available:</p>\n\n<ul>\n  <li>\n    <p><code>_response_</code>: A response object with the following keys:</p>\n\n    <ul>\n      <li>\n        <p><code>status</code>: HTTP status as integer. (Almost always 200)</p>\n      </li>\n      <li>\n        <p><code>headers</code>: Response headers; for example, <code>{{ _response_.headers.Content-Type }}</code> expands to the value of the Content-Type header.  Keys are insensitive to cases and -/_.</p>\n      </li>\n    </ul>\n  </li>\n</ul>\n\n<h1>Ordering Events</h1>\n\n<p>To specify the order of events created in each run, set <code>events_order</code> to an array of sort keys, each of which looks like either <code>expression</code> or <code>[expression, type, descending]</code>, as described as follows:</p>\n\n<ul>\n  <li>\n    <p><em>expression</em> is a Liquid template to generate a string to be used as sort key.</p>\n  </li>\n  <li>\n    <p><em>type</em> (optional) is one of <code>string</code> (default), <code>number</code> and <code>time</code>, which specifies how to evaluate <em>expression</em> for comparison.</p>\n  </li>\n  <li>\n    <p><em>descending</em> (optional) is a boolean value to determine if comparison should be done in descending (reverse) order, which defaults to <code>false</code>.</p>\n  </li>\n</ul>\n\n<p>Sort keys listed earlier take precedence over ones listed later.  For example, if you want to sort articles by the date and then by the author, specify <code>[[\"{{date}}\", \"time\"], \"{{author}}\"]</code>.</p>\n\n<p>Sorting is done stably, so even if all events have the same set of sort key values the original order is retained.  Also, a special Liquid variable <code>_index_</code> is provided, which contains the zero-based index number of each event, which means you can exactly reverse the order of events by specifying <code>[[\"{{_index_}}\", \"number\", true]]</code>.</p>\n",
        "creates_events": true,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": true,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "WeiboPublishAgent",
        "description": "<p>The Weibo Publish Agent publishes tweets from the events it receives.</p>\n\n<p>You must first set up a Weibo app and generate an <code>access_token</code> for the user that will be used for posting status updates.</p>\n\n<p>You’ll use that <code>access_token</code>, along with the <code>app_key</code> and <code>app_secret</code> for your Weibo app. You must also include the Weibo User ID (as <code>uid</code>) of the person to publish as.</p>\n\n<p>You must also specify a <code>message_path</code> parameter: a <a href=\"http://goessner.net/articles/JsonPath/\">JSONPaths</a> to the value to tweet.</p>\n\n<p>Set <code>expected_update_period_in_days</code> to the maximum amount of time that you’d expect to pass between Events being created by this Agent.</p>\n",
        "creates_events": true,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "WeiboUserAgent",
        "description": "<p>The Weibo User Agent follows the timeline of a specified Weibo user. It uses this endpoint: http://open.weibo.com/wiki/2/statuses/user_timeline/en</p>\n\n<p>You must first set up a Weibo app and generate an <code>acess_token</code> to authenticate with. Provide that, along with the <code>app_key</code> and <code>app_secret</code> for your Weibo app in the options.</p>\n\n<p>Specify the <code>uid</code> of the Weibo user whose timeline you want to watch.</p>\n\n<p>Set <code>expected_update_period_in_days</code> to the maximum amount of time that you’d expect to pass between Events being created by this Agent.</p>\n",
        "creates_events": true,
        "receives_events": false,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "WitaiAgent",
        "description": "<p>The <code>wit.ai</code> agent receives events, sends a text query to your <code>wit.ai</code> instance and generates outcome events.</p>\n\n<p>Fill in <code>Server Access Token</code> of your <code>wit.ai</code> instance. Use <a href=\"https://github.com/cantino/huginn/wiki/Formatting-Events-using-Liquid\">Liquid</a> to fill query field.</p>\n\n<p><code>expected_receive_period_in_days</code> is the expected number of days by which agent should receive events. It helps in determining if the agent is working.</p>\n",
        "creates_events": true,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": null
      },
      {
        "name": "WunderlistAgent",
        "description": "<p>The WunderlistAgent creates new Wunderlist tasks based on the incoming event.</p>\n\n<p>To be able to use this Agent you need to authenticate with Wunderlist in the <a href=\"/services\">Services</a> section first.</p>\n",
        "creates_events": true,
        "receives_events": true,
        "consumes_file_pointer": false,
        "emits_file_pointer": false,
        "controls_agents": false,
        "dry_runs": false,
        "form_configurable": false,
        "oauth_service": "wunderlist"
      }
    ]
  }
]